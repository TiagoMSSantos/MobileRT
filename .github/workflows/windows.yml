name: Native Windows (Qt)

on:
  push:
    paths-ignore:
    - '*'
    - '.github/**'
    - 'app/*'
    - 'app/debug/**'
    - 'app/release/**'
    - 'app/System_dependent/**'
    - 'app/src/**'
    - 'docker_image/**'
    - 'docs/**'
    - 'gradle/**'
    - 'scripts/**'
    - 'WavefrontOBJs/**'
    - '!.github/workflows/windows.yml'
    - '!app/CMakeLists.txt'
    - '!app/System_dependent/CMakeLists.txt'
    - '!app/System_dependent/Native/**'
    - '!scripts/compile_native.sh'

env:
  CMAKE_VERSION: 3.16.2
  NINJA_VERSION: 1.9.0
  CCACHE_VERSION: 3.7.7

jobs:
  Build:
    name: ${{ matrix.name }} ${{ matrix.type }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        type: [release]
        name: ["MSVC", "MinGW"]
        include:
        - name: "MSVC"
#          os: windows-2016
          cxx: "C:/PROGRA~2/MICROS~1/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x86/cl.exe"
          cc: "C:/PROGRA~2/MICROS~1/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x86/cl.exe"
          #C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/SDK/ScopeCppSDK/VC/bin/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx64/arm/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx64/arm64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x86/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx86/arm/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx86/arm64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx86/x64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx86/x86/cl.exe

        - name: "MSVC"
          os: windows-2019
          cxx: "C:/PROGRA~2/MICROS~1/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/HostX64/x86/cl.exe"
          cc: "C:/PROGRA~2/MICROS~1/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/HostX64/x86/cl.exe"
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/SDK/ScopeCppSDK/vc15/VC/bin/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/HostX64/arm/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/HostX64/arm64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/HostX64/x64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/HostX64/x86/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/HostX86/arm/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/HostX86/arm64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/HostX86/x64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.16.27023/bin/HostX86/x86/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.25.28610/bin/HostX64/x64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.25.28610/bin/HostX64/x86/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.25.28610/bin/HostX86/x64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.25.28610/bin/HostX86/x86/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/Hostx64/arm/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/Hostx64/arm64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/Hostx64/x64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/Hostx64/x86/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/Hostx86/arm/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/Hostx86/arm64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/Hostx86/x64/cl.exe
          #C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/Hostx86/x86/cl.exe

        - name: "MinGW"
          cxx: "gcc"
          cc: "g++"

    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4

    - name: Download Ninja and CMake
      if: success()
      working-directory: .
      id: cmake_and_ninja
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})
        set(ninja_version $ENV{NINJA_VERSION})

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        if ("${{ runner.os }}" MATCHES "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "win64-x64.zip")
          set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
        endif()

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        message("::set-output name=cmake_dir::${cmake_dir}")

        if (NOT "${{ runner.os }}" MATCHES "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

    - name: Download ccache
      if: success()
      working-directory: .
      id: ccache
      shell: cmake -P {0}
      run: |
        set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${{ runner.os }}.tar.xz")
        file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)

    - name: Prepare ccache timestamp
      if: success()
      working-directory: .
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")

    - name: ccache cache files
      if: success()
      uses: actions/cache@v2.1.6
      with:
        path: .ccache
        key: ${{ matrix.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.name }}-ccache

    - name: Create build directory
      if: success()
      shell: bash
      working-directory: .
      run: |
        mkdir -p build_native;
        mkdir -p example/Qt;
        vcpkg install pthread:x86-windows;
        vcpkg install pthread:x64-windows;
      # find "C:/Program Files (x86)/Microsoft Visual Studio/" -iname cl.exe;

    - name: Install Qt
      if: success()
      uses: jurplel/install-qt-action@v2.13.2
      with:
        # ['dir', 'version', 'host', 'target', 'arch', 'install-deps', 'modules', 'cached',
        # 'setup-python', 'tools', 'set-env', 'tools-only', 'aqtversion', 'py7zrversion', 'extra']
        version: '5.12.9'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2017_64'
        dir: '${{ github.workspace }}/example'
        install-deps: 'true'
        modules: 'qtcharts qtwebengine'
        cached: 'false'
        aqtversion: '==0.9.4'
        py7zrversion: '==0.9.1'
        extra: '--external 7z'

    - name: Build ${{ matrix.type }} (${{ matrix.cxx }})
      if: success()
      working-directory: .
      shell: bash
      run: |
        mkdir -p reports;
        bash scripts/compile_native.sh ${{ matrix.type }} "${{ matrix.cxx }}" 2>&1 | tee ./reports/build.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Run tests
      if: success()
      working-directory: .
      shell: bash
      run: |
        mkdir -p reports;
        bash scripts/run_tests.sh ${{ matrix.type }} 2>&1 | tee ./reports/tests.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Upload reports
      if: always()
      uses: actions/upload-artifact@v2
      continue-on-error: true
      with:
        name: Reports
        path: ./reports
        if-no-files-found: warn
