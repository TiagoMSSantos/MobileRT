name: Build Qt Windows

on:
  pull_request:
  release:
  push:
    paths-ignore:
    - 'docs/**'
    - 'docker_image/**'
    - 'scripts/Downloads/**'
    - 'scripts/plot/**'
    - 'WavefrontOBJs/**'
    - '.github/**'
    - '!.github/workflows/windows.yml'
    - '*'
#branches-ignore:
#  - '**'

env:
  CMAKE_VERSION: 3.16.2
  NINJA_VERSION: 1.9.0
  CCACHE_VERSION: 3.7.7

jobs:
  Build:
    name: ${{ matrix.config.name }} ${{ matrix.type }}
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        type: [Debug, Release]
        config:
        - {
            name: "Windows MSVC", artifact: "Windows-MSVC.tar.xz",
            os: windows-2019,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Windows MinGW", artifact: "Windows-MinGW.tar.xz",
            os: windows-2019,
            cc: "gcc", cxx: "g++"
          }

    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.3

    - name: Download Ninja and CMake
      id: cmake_and_ninja
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})
        set(ninja_version $ENV{NINJA_VERSION})

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "win64-x64.zip")
          set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
        endif()

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        message("::set-output name=cmake_dir::${cmake_dir}")

        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

    - name: Download ccache
      id: ccache
      shell: cmake -P {0}
      run: |
        set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${{ runner.os }}.tar.xz")
        file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")

    - name: ccache cache files
      uses: actions/cache@v2.1.1
      with:
        path: .ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-

    - name: Create build directory
      if: success()
      working-directory: .
      run: |
        md -Force build_native
        md -Force example
        md -Force example/Qt
        vcpkg install pthread:x86-windows
        vcpkg install pthread:x64-windows
        dir
        g++ -v

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.9'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2017_64'
        dir: '${{ github.workspace }}/example'
        install-deps: 'true'
        modules: 'qtcharts qtwebengine'
        mirror: 'http://mirrors.ocf.berkeley.edu/qt/'
        cached: 'false'
        aqtversion: '==0.9.4'
        py7zrversion: '==0.9.1'
        extra: '--external 7z'

    - name: Build ${{ matrix.type }}
      working-directory: .
      shell: bash
      run: |
        mkdir -p ./reports;
        bash scripts/compile_native.sh ${{ matrix.type }} g++ 2>&1 | tee ./reports/build.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Run tests
      working-directory: .
      shell: bash
      run: |
        bash ./scripts/run_tests.sh ${{ matrix.type }} 2>&1 | tee ./reports/tests.log;

    - name: Upload reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Reports
        path: ./reports
