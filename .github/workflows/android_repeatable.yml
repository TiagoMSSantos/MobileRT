name: R

on:
  workflow_dispatch:
  push:
    paths-ignore:
    - '*'
    - '**/**'
    - '!.github/workflows/android_repeatable.yml'
    - '!.github/workflows/android_repeatable-matrix.json'

permissions: {}

defaults:
  run:
    shell: sh
    working-directory: .

concurrency:
  group: ${{ github.workflow }} ${{ github.ref }}
  cancel-in-progress: true

# Default environment variables.
env:
  GITHUB_STEP_TIMEOUT_SMALL: 4
  GITHUB_STEP_TIMEOUT_MEDIUM: 10
  GITHUB_STEP_TIMEOUT_LONG: 20

jobs:
  Matrix:
    name: Set Matrix
    runs-on: macos-latest
    timeout-minutes: 2

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout
        timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
        if: success()
        uses: actions/checkout@v5
        with:
          # Check available parameters in: https://github.com/actions/checkout/blob/main/action.yml
          lfs: true

      - name: Set Matrix
        id: set-matrix
        timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
        if: success()
        run: |
          MATRIX=$(echo $(cat .github/workflows/android_repeatable-matrix.json) | sed 's/ //g');
          echo "Matrix: ${MATRIX}";
          echo "matrix=${MATRIX}" >> ${GITHUB_OUTPUT};


  Build:
    needs: [Matrix]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.Matrix.outputs.matrix) }}

    name: ${{ matrix.test }} Android ${{ matrix.android_api }} [${{ matrix.type }} (${{ matrix.host_os }})]
    runs-on: ${{ matrix.host_os }}
    timeout-minutes: 360

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/checkout@v5
      with:
        # Check available parameters in: https://github.com/actions/checkout/blob/main/action.yml
        lfs: true

    - name: Set up JDK
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/setup-java@v4
      with:
        # Check available parameters in: https://github.com/actions/setup-java/blob/main/action.yml
        java-version: 21
        distribution: zulu
        java-package: jdk
        check-latest: false
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN
        settings-path: ~/.gradle
        overwrite-settings: true
        gpg-private-key: ''
        gpg-passphrase: GPG_PASSPHRASE
        cache: gradle
        cache-dependency-path: '**/build.gradle'

    - name: Delete unnecessary Android SDK components
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: success()
      run: |
        echo 'Available Android versions:';
        du -h -d 1 ${ANDROID_HOME};
        rm -rf ${ANDROID_HOME}/ndk;
        rm -rf ${ANDROID_HOME}/extras;
        rm -rf ${ANDROID_HOME}/cmake;
        mkdir -p ${ANDROID_HOME}/ndk;
        mkdir -p ${ANDROID_HOME}/extras;
        mkdir -p ${ANDROID_HOME}/cmake;
        du -h -d 1 ${ANDROID_HOME}/ndk;
        du -h -d 1 ${ANDROID_HOME}/cmake;
        du -h -d 1 ${ANDROID_HOME}/build-tools;
        du -h -d 1 ${ANDROID_HOME}/platforms;
        du -h -d 1 ${ANDROID_HOME}/extras;
        du -h -d 1 ${HOME};
        df -Pk -h ${HOME};
        env;

    - name: Set Android CPU Architecture
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      run: |
        set +eu;
        MAJOR_MAC_VERSION=$(sw_vers | grep ProductVersion | cut -d ':' -f2 | cut -d '.' -f1 | tr -d '[:space:]');
        if [ "${MAJOR_MAC_VERSION}" != '' ]; then
          echo "MacOS '${MAJOR_MAC_VERSION}' detected";
        fi
        set -e;
        if ${{ endsWith(matrix.host_os, '-arm') }} = true || "${MAJOR_MAC_VERSION}" -gt 13; then
            echo 'android_arch=\"arm64-v8a\"' >> "${GITHUB_ENV}";
            echo 'android_emulator_arch=arm64-v8a' >> "${GITHUB_ENV}";
        else
          if [ "${{ matrix.android_api }}" -gt 30 ]; then
            echo 'android_arch=\"x86_64\"' >> "${GITHUB_ENV}";
            echo 'android_emulator_arch=x86_64' >> "${GITHUB_ENV}";
          else
            echo 'android_arch=\"x86\"' >> "${GITHUB_ENV}";
            echo 'android_emulator_arch=x86' >> "${GITHUB_ENV}";
          fi
        fi
        set -u;
        . scripts/helper_functions.sh && parallelizeBuild && echo "NCPU_CORES=${NCPU_CORES}" >> "${GITHUB_ENV}";

    - name: Download Android CMake
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && !startsWith(matrix.host_os, 'windows') && !endsWith(matrix.host_os, '-arm')
      run: |
        ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install 'cmake;4.0.2';

    - name: Download Android CMake Windows
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.host_os, 'windows')
      run: |
        ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager.bat --install 'cmake;4.0.2';

    - name: Download Android dependencies
      timeout-minutes: 8
      if: success()
      run: |
        sh gradlew build --dry-run -Dorg.gradle.configuration-cache=true --parallel \
          -DtestType="${{ matrix.type }}" -DandroidApiVersion="${{ matrix.android_api }}" -DabiFilters="[${{ env.android_arch }}]" \
          --info --warning-mode all --stacktrace;

    - name: Build ${{ matrix.type }}
      timeout-minutes: 20
      if: success()
      run: |
        sh scripts/compile_android.sh -t ${{ matrix.type }} -a ${{ matrix.android_api }} -r yes -f ${{ env.android_arch }};

    - name: Enable KVM group permissions
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.host_os, 'ubuntu')
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules;
        sudo udevadm control --reload-rules;
        sudo udevadm trigger --name-match=kvm;

    - name: Download Android dependencies
      timeout-minutes: 8
      if: success()
      run: |
        sh gradlew connectedAndroidTest --dry-run -Dorg.gradle.configuration-cache=true --parallel \
          -DtestType="${{ matrix.type }}" -DandroidApiVersion="${{ matrix.android_api }}" -DabiFilters="[${{ env.android_arch }}]" \
          --info --warning-mode all --stacktrace;

    - name: Run Android tests
      timeout-minutes: 20
      if: success() && !startsWith(matrix.host_os, 'windows')
      uses: ReactiveCircus/android-emulator-runner@1dcd0090116d15e7c562f8db72807de5e036a4ed # v2
      env:
        ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: 1
      with:
        # Check available parameters in: https://github.com/ReactiveCircus/android-emulator-runner/blob/main/action.yml
        api-level: ${{ matrix.android_api }}
        target: google_apis
        arch: ${{ env.android_emulator_arch }}
        disable-animations: true
        disable-spellchecker: true
        channel: stable
        emulator-options: -no-metrics -no-window -cores ${{ env.NCPU_CORES }} -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -camera-back none -camera-front none
        cores: ${{ env.NCPU_CORES }}
        disk-size: 10000M
        sdcard-path-or-size: 2048M
        ram-size: 1024M
        emulator-boot-timeout: 400 # It can take more than 5 min to boot, and the tests can take more than 17 min to finish.
        script: |
          sh scripts/run_tests_android.sh -t ${{ matrix.type }} -r rep_puscas.mobilertapp.${{ matrix.test }} -a ${{ matrix.android_api }} -k false -f ${{ env.android_arch }};

    - name: Upload reports as artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/upload-artifact@v4
      with:
        # Check available parameters in: https://github.com/actions/upload-artifact/blob/main/action.yml
        name: reports_${{ matrix.android_api }}_${{ matrix.type }}_${{ matrix.host_os }}-artifacts
        path: app/build/reports
        if-no-files-found: error
        retention-days: 90
        overwrite: true
        include-hidden-files: true
