name: Android

on:
  workflow_dispatch:
  push:
    paths-ignore:
    - '*'
    - '.github/**'
    - 'app/debug/**'
    - 'app/release/**'
    - 'app/third_party/conan/**'
    - 'app/System_dependent/**'
    - 'docker_image/**'
    - 'docs/**'
    - 'scripts/**'
    - 'WavefrontOBJs/**'
    - '!.github/workflows/android.yml'
    - '!.github/workflows/android_matrix.json'
    - '!app/third_party/conan/Android/**'
    - '!app/System_dependent/CMakeLists.txt'
    - '!app/System_dependent/Android_JNI/**'
    - '!scripts/check_android.sh'
    - '!scripts/compile_android.sh'
    - '!scripts/run_tests.sh'
    - '!scripts/run_tests_android.sh'
    - '!scripts/helper_functions.sh'
    - '!codecov.yml'
    - '!*gradle*'

defaults:
  run:
    shell: bash
    working-directory: .

concurrency:
  group: ${{ github.workflow }} ${{ github.ref }}
  cancel-in-progress: true

# Default environment variables.
env:
  GITHUB_STEP_TIMEOUT_SMALL: 3
  GITHUB_STEP_TIMEOUT_MEDIUM: 6
  GITHUB_STEP_TIMEOUT_LONG: 20
  GITHUB_STEP_TIMEOUT_VERY_LONG: 30

jobs:
  Matrix:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: true

    name: Set Matrix
    runs-on: ubuntu-latest
    timeout-minutes: 1

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/checkout@v3

    - name: Set Matrix
      id: set-matrix
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      run: |
        MATRIX=$(echo $(cat .github/workflows/android_matrix.json) | sed 's/ //g' );
        echo "Matrix: ${MATRIX}";
        echo "::set-output name=matrix::${MATRIX}";


  Build:
    needs: [Matrix]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.Matrix.outputs.matrix) }}

    name: Build ${{ matrix.android_api }} ${{ matrix.type }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/checkout@v3

    - name: Set up JDK
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/setup-java@v3
      with:
        # Check available parameters in: https://github.com/actions/setup-java/blob/main/action.yml
        java-version: 11
        distribution: zulu
        java-package: jdk
        architecture: x64
        check-latest: false
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN
        settings-path: ~/.m2
        overwrite-settings: true
        gpg-private-key: ''
        gpg-passphrase: GPG_PASSPHRASE

    - name: Add custom environment variables
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      working-directory: .
      run: |
        echo "Available Android versions:";
        du -h -d 1 ${ANDROID_HOME}/ndk;
        du -h -d 1 ${ANDROID_HOME}/cmake;
        du -h -d 1 ${ANDROID_HOME}/build-tools;
        ls -lahp ${ANDROID_HOME}/platforms;
        ls -lahp ${HOME};
        echo "ANDROID_NDK_PATH=${ANDROID_HOME}/ndk/${{ matrix.ndk_version }}" >> "${GITHUB_ENV}";
        echo "GRADLE_PATH=${HOME}/.gradle" >> "${GITHUB_ENV}";
        printenv;

    # Useful step to avoid gradle having to download Gradle dependencies
    # Taken from: https://github.com/marketplace/actions/download-workflow-artifact
    - name: Download Gradle packages artifact
      id: download-gradle-artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: dawidd6/action-download-artifact@v2
      continue-on-error: true
      with:
        # Check available parameters in: https://github.com/dawidd6/action-download-artifact/blob/master/action.yml
        # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
        # Required, if the artifact is from a different repo
        # Required, if the repo is private a Personal Access Token with `repo` scope is needed
        github_token: ${{ secrets.GITHUB_TOKEN }}
        # Optional, workflow file name or ID
        # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
        workflow: android.yml
        # Optional, the status or conclusion of a completed workflow to search for
        # Can be one of a workflow conclusion:
        #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
        # Or a workflow status:
        #   "completed", "in_progress", "queued"
        workflow_conclusion: null
        # Optional, will get head commit SHA
        pr: ${{ github.event.pull_request.number }}
        # Optional, no need to specify if PR is
        commit: ${{ github.event.pull_request.head.sha }}
        # Optional, will use the branch
        # branch: master
        # Optional, defaults to all types
        # event: push
        # Optional, will use specified workflow run
        # run_id: 1122334455
        # Optional, run number from the workflow
        # run_number: 34
        # Optional, uploaded artifact name,
        # will download all artifacts if not specified
        # and extract them into respective subdirectories
        # https://github.com/actions/download-artifact#download-all-artifacts
        name: gradle-packages
        # Optional, a directory where to extract artifact(s), defaults to the current directory
        path: ${{ env.GRADLE_PATH }}
        # Optional, defaults to current repo
        repo: ${{ github.repository }}
        # Optional, check the workflow run to whether it has an artifact
        # then will get the last available artifact from the previous workflow
        # default false, just try to download from the last one
        check_artifacts:  true
        # Optional, search for the last workflow run whose stored an artifact named as in `name` input
        # default false
        search_artifacts: true
        # Optional, choose to skip unpacking the downloaded artifact(s)
        # default false
        skip_unpack: false

    - name: Extract and check files from gradle artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success() && steps.download-gradle-artifact.outcome == 'success'
      working-directory: .
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && extractFilesFromArtifact ${{ env.GRADLE_PATH }};

    - name: Build ${{ matrix.type }}
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_VERY_LONG) }}
      if: success()
      working-directory: .
      run: |
        bash scripts/compile_android.sh -t ${{ matrix.type }} -r yes -n ${{ matrix.ndk_version }} -m ${{ matrix.cmake_version }} -f "\"x86\"";

    - name: Check binaries' paths
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && checkPathExists ${{ env.ANDROID_NDK_PATH }};
        . scripts/helper_functions.sh && checkPathExists .gradle;
        . scripts/helper_functions.sh && checkPathExists app/build;
        . scripts/helper_functions.sh && checkPathExists app/.cxx;
        . scripts/helper_functions.sh && checkPathExists app/third_party;

    - name: Upload generated binaries to cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/cache@v3
      with:
        # Check available parameters in: https://github.com/actions/cache/blob/main/action.yml
        key: compiled_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        restore-keys: compiled_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        path: |
          .gradle
          app/build
          app/.cxx
          app/third_party

    - name: Zip Gradle packages
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug'
      run: |
        set +e;
        du -h -d 1 ${{ env.GRADLE_PATH }};
        du -h -d 1 ${{ env.GRADLE_PATH }}/caches;
        du -h -d 1 ${{ env.GRADLE_PATH }}/wrapper/dists;
        du -h -d 1 ${{ env.GRADLE_PATH }}/daemon;
        du -h -d 1 ${{ env.GRADLE_PATH }}/notifications;
        du -h -d 1 ${{ env.GRADLE_PATH }}/jdks;
        du -h -d 1 ${{ env.GRADLE_PATH }}/kotlin-profile;
        du -h -d 1 ${{ env.GRADLE_PATH }}/workers;
        du -h -d 1 ${{ env.GRADLE_PATH }}/native;

        echo "Deleting unnecessary cache.";
        rm -rf ${{ env.GRADLE_PATH }}/caches/build-cache-*;
        rm -rf ${{ env.GRADLE_PATH }}/caches/journal-*;
        rm -rf ${{ env.GRADLE_PATH }}/daemon;
        rm -rf ${{ env.GRADLE_PATH }}/jdks;
        rm -rf ${{ env.GRADLE_PATH }}/kotlin-profile;
        rm -rf ${{ env.GRADLE_PATH }}/workers;
        rm -rf ${{ env.GRADLE_PATH }}/native;
        rm -rf ${{ env.GRADLE_PATH }}/.tmp;
        rm -rf ${{ env.GRADLE_PATH }}/notifications;

        find ${{ env.GRADLE_PATH }}/wrapper/dists -not -iname '*gradle*.zip' -delete;
        find ${{ env.GRADLE_PATH }} -iname "docs" -exec rm -rf {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.log*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.txt*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.md*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.doc*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.xls*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.htm*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.lock*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.lck*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.ok*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.png*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.jpg*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.jpeg*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -iname "*.gif*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -name "*README*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -name "*NOTICE*" -exec rm {} \;
        find ${{ env.GRADLE_PATH }} -name "*LICENSE*" -exec rm {} \;

        find ${{ env.GRADLE_PATH }} -empty -exec rm -rf {} \;
        find ${{ env.GRADLE_PATH }} -size 0 -exec rm {} \;
        set -e;

        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && zipFilesForArtifact ${{ env.GRADLE_PATH }} gradle-packages.zip;

    - name: Upload Gradle packages as artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug'
      uses: actions/upload-artifact@v3
      with:
        # Check available parameters in: https://github.com/actions/upload-artifact/blob/main/action.yml
        name: gradle-packages
        path: ${{ env.GRADLE_PATH }}/gradle-packages.zip
        if-no-files-found: error
        retention-days: 90


  AndroidTests:
    needs: [Matrix, Build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    outputs:
      matrix-sonar: ${{ steps.set-matrix-sonar.outputs.matrix-sonar }}

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.Matrix.outputs.matrix) }}

    name: Android tests ${{ matrix.android_api }} ${{ matrix.type }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/checkout@v3

    - name: Set up JDK
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/setup-java@v3
      with:
        # Check available parameters in: https://github.com/actions/setup-java/blob/main/action.yml
        java-version: 11
        distribution: zulu
        java-package: jdk
        architecture: x64
        check-latest: false
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN
        settings-path: ~/.m2
        overwrite-settings: true
        gpg-private-key: ''
        gpg-passphrase: GPG_PASSPHRASE

    - name: Add custom environment variables
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        echo "Available Android versions:";
        du -h -d 1 ${ANDROID_HOME}/ndk;
        du -h -d 1 ${ANDROID_HOME}/cmake;
        du -h -d 1 ${ANDROID_HOME}/build-tools;
        ls -lahp ${ANDROID_HOME}/platforms;
        ls -lahp ${HOME};
        echo "ANDROID_NDK_PATH=${ANDROID_HOME}/ndk/${{ matrix.ndk_version }}" >> "${GITHUB_ENV}";
        echo "GRADLE_PATH=${HOME}/.gradle" >> "${GITHUB_ENV}";

    - name: Download generated binaries from cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/cache@v3
      with:
        # Check available parameters in: https://github.com/actions/cache/blob/main/action.yml
        key: compiled_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        restore-keys: compiled_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        path: |
          .gradle
          app/build
          app/.cxx
          app/third_party

    # Useful step to avoid gradle having to download Gradle dependencies
    # Taken from: https://github.com/marketplace/actions/download-workflow-artifact
    - name: Download Gradle packages artifact
      id: download-gradle-artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: dawidd6/action-download-artifact@v2
      continue-on-error: true
      with:
        # Check available parameters in: https://github.com/dawidd6/action-download-artifact/blob/master/action.yml
        # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
        # Required, if the artifact is from a different repo
        # Required, if the repo is private a Personal Access Token with `repo` scope is needed
        github_token: ${{ secrets.GITHUB_TOKEN }}
        # Optional, workflow file name or ID
        # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
        workflow: android.yml
        # Optional, the status or conclusion of a completed workflow to search for
        # Can be one of a workflow conclusion:
        #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
        # Or a workflow status:
        #   "completed", "in_progress", "queued"
        workflow_conclusion: null
        # Optional, will get head commit SHA
        pr: ${{ github.event.pull_request.number }}
        # Optional, no need to specify if PR is
        commit: ${{ github.event.pull_request.head.sha }}
        # Optional, will use the branch
        # branch: master
        # Optional, defaults to all types
        # event: push
        # Optional, will use specified workflow run
        # run_id: 1122334455
        # Optional, run number from the workflow
        # run_number: 34
        # Optional, uploaded artifact name,
        # will download all artifacts if not specified
        # and extract them into respective subdirectories
        # https://github.com/actions/download-artifact#download-all-artifacts
        name: gradle-packages
        # Optional, a directory where to extract artifact(s), defaults to the current directory
        path: ${{ env.GRADLE_PATH }}
        # Optional, defaults to current repo
        repo: ${{ github.repository }}
        # Optional, check the workflow run to whether it has an artifact
        # then will get the last available artifact from the previous workflow
        # default false, just try to download from the last one
        check_artifacts:  true
        # Optional, search for the last workflow run whose stored an artifact named as in `name` input
        # default false
        search_artifacts: true
        # Optional, choose to skip unpacking the downloaded artifact(s)
        # default false
        skip_unpack: false

    - name: Extract and check files from gradle artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success() && steps.download-gradle-artifact.outcome == 'success'
      working-directory: .
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && extractFilesFromArtifact ${{ env.GRADLE_PATH }};

    - name: Check binaries' paths
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && checkPathExists ${{ env.ANDROID_NDK_PATH }};
        . scripts/helper_functions.sh && checkPathExists .gradle;
        . scripts/helper_functions.sh && checkPathExists app/build;
        . scripts/helper_functions.sh && checkPathExists app/.cxx;
        . scripts/helper_functions.sh && checkPathExists app/third_party;

    - name: Run Android tests
      id: android-tests
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_VERY_LONG) }}
      if: success() && !startsWith(matrix.os, 'windows')
      uses: ReactiveCircus/android-emulator-runner@v2
      env:
        NCPU_CORES: 3
        MEM_MB: 2048
      continue-on-error: false
      with:
        # Check available parameters in: https://github.com/ReactiveCircus/android-emulator-runner/blob/main/action.yml
        api-level: ${{ matrix.android_api }}
        cmake: ${{ matrix.cmake_version }}
        target: default
        arch: x86
        disable-animations: true
        disable-spellchecker: true
        channel: stable
        emulator-options: -no-window -accel on -cores ${{ env.NCPU_CORES }} -memory ${{ env.MEM_MB }} -cache-size ${{ env.MEM_MB }} -partition-size ${{ env.MEM_MB }} -writable-system -ranchu -fixed-scale -skip-adb-auth -gpu swiftshader_indirect -no-audio -no-snapshot -no-snapstorage -no-snapshot-update-time -no-snapshot-save -no-snapshot-load -no-boot-anim -camera-back none -camera-front none -netfast -wipe-data -no-sim -no-passive-gps -read-only -no-direct-adb -no-location-ui -no-hidpi-scaling -no-mouse-reposition -no-nested-warnings -verbose
        cores: ${{ env.NCPU_CORES }}
        heap-size: ${{ env.MEM_MB }}M
        sdcard-path-or-size: ${{ env.MEM_MB }}M
        ram-size: ${{ env.MEM_MB }}M
        disk-size: ${{ env.MEM_MB }}M
        avd-name: Android_Emulator_API_${{ matrix.android_api }}
        force-avd-creation: true
        disable-linux-hw-accel: auto
        enable-hw-keyboard: false
        script: |
          bash scripts/run_tests_android.sh -t ${{ matrix.type }} -r all -n ${{ matrix.ndk_version }} -m ${{ matrix.cmake_version }} -k false -f "\"x86\"";

    - name: Check report's paths
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug'
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && checkPathExists app/build/reports/coverage/androidTest/debug report.xml;

    - name: Upload reports to cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug'
      uses: actions/cache@v3
      with:
        # Check available parameters in: https://github.com/actions/cache/blob/main/action.yml
        key: reports_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        restore-keys: reports_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        path: |
          app/build/reports

    - name: Set Matrix for Sonar
      id: set-matrix-sonar
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug'
      run: |
        MATRIX_SONAR=$(echo '${{ toJSON(matrix) }}' | jq -c -s '{"include":[.[]]}');
        echo "Matrix Sonar: ${MATRIX_SONAR}";
        echo "::set-output name=matrix-sonar::${MATRIX_SONAR}";

    - name: Add base64 key to environment variable in order to sign APK
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        echo "BASE64_KEY=$(openssl base64 < app/MobileRT.jks | tr -d '[:space:]')" >> "${GITHUB_ENV}";

    - name: Sign APK
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: r0adkll/sign-android-release@v1
      with:
        # Check available parameters in: https://github.com/r0adkll/sign-android-release/blob/master/action.yml
        releaseDirectory: app/build/outputs/apk/${{ matrix.type }}
        signingKeyBase64: ${{ env.BASE64_KEY }}
        alias: ${{ secrets.KEY_ALIAS }}
        keyStorePassword: ${{ secrets.SIGNING_KEY }}
        keyPassword: ${{ secrets.SIGNING_KEY }}

    - name: Upload APK as artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'macos')
      uses: actions/upload-artifact@v3
      with:
        # Check available parameters in: https://github.com/actions/upload-artifact/blob/main/action.yml
        name: MobileRT_${{ matrix.type }}_exp-artifacts
        path: app/build/outputs/apk/${{ matrix.type }}
        if-no-files-found: error
        retention-days: 90


  UnitTests:
    needs: [Matrix, Build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.Matrix.outputs.matrix) }}

    name: Unit tests ${{ matrix.android_api }} ${{ matrix.type }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/checkout@v3

    - name: Set up JDK
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/setup-java@v3
      with:
        # Check available parameters in: https://github.com/actions/setup-java/blob/main/action.yml
        java-version: 11
        distribution: zulu
        java-package: jdk
        architecture: x64
        check-latest: false
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN
        settings-path: ~/.m2
        overwrite-settings: true
        gpg-private-key: ''
        gpg-passphrase: GPG_PASSPHRASE

    - name: Add custom environment variables
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        echo "Available Android versions:";
        du -h -d 1 ${ANDROID_HOME}/ndk;
        du -h -d 1 ${ANDROID_HOME}/cmake;
        du -h -d 1 ${ANDROID_HOME}/build-tools;
        ls -lahp ${ANDROID_HOME}/platforms;
        ls -lahp ${HOME};
        echo "ANDROID_NDK_PATH=${ANDROID_HOME}/ndk/${{ matrix.ndk_version }}" >> "${GITHUB_ENV}";
        echo "GRADLE_PATH=${HOME}/.gradle" >> "${GITHUB_ENV}";

    # Useful step to avoid gradle having to download Gradle dependencies
    # Taken from: https://github.com/marketplace/actions/download-workflow-artifact
    - name: Download Gradle packages artifact
      id: download-gradle-artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: dawidd6/action-download-artifact@v2
      continue-on-error: true
      with:
        # Check available parameters in: https://github.com/dawidd6/action-download-artifact/blob/master/action.yml
        # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
        # Required, if the artifact is from a different repo
        # Required, if the repo is private a Personal Access Token with `repo` scope is needed
        github_token: ${{ secrets.GITHUB_TOKEN }}
        # Optional, workflow file name or ID
        # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
        workflow: android.yml
        # Optional, the status or conclusion of a completed workflow to search for
        # Can be one of a workflow conclusion:
        #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
        # Or a workflow status:
        #   "completed", "in_progress", "queued"
        workflow_conclusion: null
        # Optional, will get head commit SHA
        pr: ${{ github.event.pull_request.number }}
        # Optional, no need to specify if PR is
        commit: ${{ github.event.pull_request.head.sha }}
        # Optional, will use the branch
        # branch: master
        # Optional, defaults to all types
        # event: push
        # Optional, will use specified workflow run
        # run_id: 1122334455
        # Optional, run number from the workflow
        # run_number: 34
        # Optional, uploaded artifact name,
        # will download all artifacts if not specified
        # and extract them into respective subdirectories
        # https://github.com/actions/download-artifact#download-all-artifacts
        name: gradle-packages
        # Optional, a directory where to extract artifact(s), defaults to the current directory
        path: ${{ env.GRADLE_PATH }}
        # Optional, defaults to current repo
        repo: ${{ github.repository }}
        # Optional, check the workflow run to whether it has an artifact
        # then will get the last available artifact from the previous workflow
        # default false, just try to download from the last one
        check_artifacts:  true
        # Optional, search for the last workflow run whose stored an artifact named as in `name` input
        # default false
        search_artifacts: true
        # Optional, choose to skip unpacking the downloaded artifact(s)
        # default false
        skip_unpack: false

    - name: Extract and check files from gradle artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success() && steps.download-gradle-artifact.outcome == 'success'
      working-directory: .
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && extractFilesFromArtifact ${{ env.GRADLE_PATH }};

    - name: Download generated binaries from cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/cache@v3
      with:
        # Check available parameters in: https://github.com/actions/cache/blob/main/action.yml
        key: compiled_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        restore-keys: compiled_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        path: |
          .gradle
          app/build
          app/.cxx
          app/third_party

    - name: Check binaries' paths
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && checkPathExists ${{ env.ANDROID_NDK_PATH }};
        . scripts/helper_functions.sh && checkPathExists .gradle;
        . scripts/helper_functions.sh && checkPathExists app/build;
        . scripts/helper_functions.sh && checkPathExists app/.cxx;
        . scripts/helper_functions.sh && checkPathExists app/third_party;

    - name: Run unit tests Java
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        bash scripts/run_tests.sh -t ${{ matrix.type }} -n ${{ matrix.ndk_version }} -m ${{ matrix.cmake_version }} -f "\"x86\"";

    - name: Run linter
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      working-directory: .
      run: |
        bash scripts/check_android.sh -n ${{ matrix.ndk_version }} -m ${{ matrix.cmake_version }} -f "\"x86\"";


  Sonar:
    needs: [AndroidTests]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.AndroidTests.outputs.matrix-sonar) }}

    name: Code Coverage & Sonar ${{ matrix.type }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/checkout@v3

    - name: Set up JDK
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/setup-java@v3
      with:
        # Check available parameters in: https://github.com/actions/setup-java/blob/main/action.yml
        java-version: 11
        distribution: zulu
        java-package: jdk
        architecture: x64
        check-latest: false
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN
        settings-path: ~/.m2
        overwrite-settings: true
        gpg-private-key: ''
        gpg-passphrase: GPG_PASSPHRASE

    - name: Add custom environment variables
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        echo "Available Android versions:";
        du -h -d 1 ${ANDROID_HOME}/ndk;
        du -h -d 1 ${ANDROID_HOME}/cmake;
        du -h -d 1 ${ANDROID_HOME}/build-tools;
        ls -lahp ${ANDROID_HOME}/platforms;
        ls -lahp ${HOME};
        echo "ANDROID_NDK_PATH=${ANDROID_HOME}/ndk/${{ matrix.ndk_version }}" >> "${GITHUB_ENV}";
        echo "GRADLE_PATH=${HOME}/.gradle" >> "${GITHUB_ENV}";

    # Useful step to avoid gradle having to download Gradle dependencies
    # Taken from: https://github.com/marketplace/actions/download-workflow-artifact
    - name: Download Gradle packages artifact
      id: download-gradle-artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: dawidd6/action-download-artifact@v2
      continue-on-error: true
      with:
        # Check available parameters in: https://github.com/dawidd6/action-download-artifact/blob/master/action.yml
        # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
        # Required, if the artifact is from a different repo
        # Required, if the repo is private a Personal Access Token with `repo` scope is needed
        github_token: ${{ secrets.GITHUB_TOKEN }}
        # Optional, workflow file name or ID
        # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
        workflow: android.yml
        # Optional, the status or conclusion of a completed workflow to search for
        # Can be one of a workflow conclusion:
        #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
        # Or a workflow status:
        #   "completed", "in_progress", "queued"
        workflow_conclusion: null
        # Optional, will get head commit SHA
        pr: ${{ github.event.pull_request.number }}
        # Optional, no need to specify if PR is
        commit: ${{ github.event.pull_request.head.sha }}
        # Optional, will use the branch
        # branch: master
        # Optional, defaults to all types
        # event: push
        # Optional, will use specified workflow run
        # run_id: 1122334455
        # Optional, run number from the workflow
        # run_number: 34
        # Optional, uploaded artifact name,
        # will download all artifacts if not specified
        # and extract them into respective subdirectories
        # https://github.com/actions/download-artifact#download-all-artifacts
        name: gradle-packages
        # Optional, a directory where to extract artifact(s), defaults to the current directory
        path: ${{ env.GRADLE_PATH }}
        # Optional, defaults to current repo
        repo: ${{ github.repository }}
        # Optional, check the workflow run to whether it has an artifact
        # then will get the last available artifact from the previous workflow
        # default false, just try to download from the last one
        check_artifacts:  true
        # Optional, search for the last workflow run whose stored an artifact named as in `name` input
        # default false
        search_artifacts: true
        # Optional, choose to skip unpacking the downloaded artifact(s)
        # default false
        skip_unpack: false

    - name: Extract and check files from gradle artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success() && steps.download-gradle-artifact.outcome == 'success'
      working-directory: .
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && extractFilesFromArtifact ${{ env.GRADLE_PATH }};

    - name: Download generated binaries from cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/cache@v3
      with:
        # Check available parameters in: https://github.com/actions/cache/blob/main/action.yml
        key: compiled_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        restore-keys: compiled_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        path: |
          .gradle
          app/build
          app/.cxx
          app/third_party

    - name: Check binaries' paths
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && checkPathExists ${{ env.ANDROID_NDK_PATH }};
        . scripts/helper_functions.sh && checkPathExists .gradle;
        . scripts/helper_functions.sh && checkPathExists app/build;
        . scripts/helper_functions.sh && checkPathExists app/.cxx;
        . scripts/helper_functions.sh && checkPathExists app/third_party;

    - name: Create report's folders
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        mkdir -p app/build/reports;

    - name: Download reports from cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'ubuntu')
      uses: actions/cache@v3
      with:
        # Check available parameters in: https://github.com/actions/cache/blob/main/action.yml
        key: reports_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        restore-keys: reports_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        path: |
          app/build/reports

    - name: Check files from reports cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && checkPathExists app/build/reports/coverage/androidTest/debug report.xml;

    - name: Send code climate report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: app/src/main/java
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . ${{ github.workspace }}/scripts/helper_functions.sh && prepareBinaries;
        ../../../../test-reporter-latest-linux-amd64 format-coverage -t jacoco ../../../build/reports/coverage/androidTest/debug/report.xml;
        ../../../../test-reporter-latest-linux-amd64 upload-coverage;

    - name: Validate codecov report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        curl --retry 5 --retry-delay 2 --connect-timeout 2 --data-binary @codecov.yml https://codecov.io/validate;

    - name: Download generated binaries from cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/cache@v3
      with:
        # Check available parameters in: https://github.com/actions/cache/blob/main/action.yml
        key: compiled_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        restore-keys: compiled_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        path: |
          .gradle
          app/build
          app/.cxx
          app/third_party

    - name: Check binaries' paths
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && checkPathExists ${{ env.ANDROID_NDK_PATH }};
        . scripts/helper_functions.sh && checkPathExists .gradle;
        . scripts/helper_functions.sh && checkPathExists app/build;
        . scripts/helper_functions.sh && checkPathExists app/.cxx;
        . scripts/helper_functions.sh && checkPathExists app/third_party;

    - name: Analyze Sonar
      timeout-minutes: 100
      if: success()
      working-directory: .
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        bash gradlew --profile --parallel -DabiFilters="[\"x86\"]" -DndkVersion=${{ matrix.ndk_version }} -DcmakeVersion=${{ matrix.cmake_version }} sonarqube --info;

    - name: Check sonar path
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && checkPathExists ~/.sonar;

    - name: Send codecov report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        curl --retry 5 --retry-delay 2 --connect-timeout 2 -s https://codecov.io/bash | bash -s -- -c -F aFlag -f app/build/reports/coverage/androidTest/debug/report.xml -v;
