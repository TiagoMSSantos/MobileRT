name: Android

on:
  push:
    paths-ignore:
    - '*'
    - '.github/**'
    - 'app/debug/**'
    - 'app/release/**'
    - 'app/System_dependent/**'
    - 'docker_image/**'
    - 'docs/**'
    - 'scripts/**'
    - 'WavefrontOBJs/**'
    - '!.github/workflows/android.yml'
    - '!.github/workflows/native.yml'
    - '!app/System_dependent/CMakeLists.txt'
    - '!app/System_dependent/Android_JNI/**'
    - '!scripts/check_android.sh'
    - '!scripts/compile_android.sh'
    - '!scripts/run_tests.sh'
    - '!scripts/run_tests_android.sh'
    - '!codecov.yml'
    - '!*gradle*'

defaults:
  run:
    shell: bash
    working-directory: .

concurrency:
  group: ${{ github.workflow }} ${{ github.ref }}
  cancel-in-progress: true

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-10.15, ubuntu-18.04]
        type: [debug, release]
        include:
        - os: "ubuntu-18.04"
          android_api: 16
          ndk_version: 22.1.7171670
          cmake_version: 3.10.2

        - os: "macos-10.15"
          android_api: 16
          ndk_version: 18.1.5063045
          cmake_version: 3.6.0

    env:
      SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

    name: ${{ matrix.type }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4

    - name: Set up JDK
      if: success()
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: 'zulu'

    - name: Install Tree Linux
      if: success() && startsWith(matrix.os, 'ubuntu')
      working-directory: .
      run: |
        mkdir -p ./reports;
        sudo apt-get install --no-install-recommends -y tree 2>&1 | tee ./reports/tree.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Install Tree MacOS
      if: success() && startsWith(matrix.os, 'macos')
      working-directory: .
      run: |
        mkdir -p ./reports;
        brew install tree 2>&1 | tee ./reports/tree.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Cache SonarCloud packages
      if: success()
      uses: actions/cache@v2.1.6
      with:
        path: |
          ~/.sonar
          ./gradle
          ./app/.cxx
          ./app/build
          ./build
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Gradle packages
      if: success()
      uses: actions/cache@v2.1.6
      with:
        path: ~/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle

    - name: Setup gradlew
      if: success()
      working-directory: .
      run: |
        set -euo pipefail;
        mkdir -p ./reports;
        chmod +x ./gradlew 2>&1 | tee ./reports/setup_gradlew.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Print dependencies
      if: success() && false
      working-directory: .
      run: |
        mkdir -p ./reports;
        ./gradlew :app:dependencies 2>&1 | tee dependencies.log;
        export res=${PIPESTATUS[0]};
        echo "Result: '${res}'";
        exit ${res};

    - name: Setup code climate report
      if: success()
      working-directory: .
      run: |
        mkdir -p ./reports;
        chmod +x ./test-reporter-latest-linux-amd64 2>&1 | tee ./reports/setup_code_climate.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Run linter
      if: success()
      working-directory: .
      run: |
        mkdir -p ./app/build/reports;
        mkdir -p ./reports;
        sudo mkdir -p ${AGENT_TOOLSDIRECTORY}/jdk/11.0.10;
        sudo ln -s ${JAVA_HOME} ${AGENT_TOOLSDIRECTORY}/jdk/11.0.10/x64 || true 2>&1 | tee ./reports/create_symlink_java.log;
        bash ./scripts/check_android.sh -n ${{ matrix.ndk_version }} -m ${{ matrix.cmake_version }} 2>&1 | tee ./reports/check_android.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Run unit tests Java
      if: success()
      working-directory: .
      run: |
        mkdir -p ./app/build/reports;
        mkdir -p ./reports;
        bash ./scripts/run_tests.sh -t ${{ matrix.type }} -n ${{ matrix.ndk_version }} -m ${{ matrix.cmake_version }} 2>&1 | tee ./reports/run_tests.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Build ${{ matrix.type }}
      if: success()
      working-directory: .
      run: |
        mkdir -p ./app/build/reports;
        mkdir -p ./reports;
        tree -f | grep -i "mobilert.so";
        bash ./scripts/compile_android.sh -t ${{ matrix.type }} -r yes -n ${{ matrix.ndk_version }} -m ${{ matrix.cmake_version }};
        tree -f | grep -i "mobilert.so";
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Run Android tests
      if: success() && !startsWith(matrix.os, 'windows')
      uses: ReactiveCircus/android-emulator-runner@v2.19.1
      env:
        NCPU_CORES: 4
      with:
        api-level: ${{ matrix.android_api }}
        target: default
        arch: x86
        disable-animations: true
        emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -camera-back none -camera-front none
        cores: ${NCPU_CORES}
        sdcard-path-or-size: 100M
        ram-size: 1024M
        script: |
          mkdir -p ./app/build/reports;
          mkdir -p ./reports;
          echo "Number cores: ${NCPU_CORES}"
          bash ./scripts/run_tests_android.sh -t ${{ matrix.type }} -r all -n ${{ matrix.ndk_version }} -m ${{ matrix.cmake_version }} -k false;

    - name: Check report's paths
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug'
      run: |
        ls -la ./app 2>&1 | tee ./reports/ls_coverage_reports_1.log;
        ls -la ./app/build 2>&1 | tee ./reports/ls_coverage_reports_2.log;
        ls -la ./app/build/reports 2>&1 | tee ./reports/ls_coverage_reports_3.log;
        ls -la ./app/build/reports/coverage 2>&1 | tee ./reports/ls_coverage_reports_4.log;
        ls -la ./app/build/reports/coverage/debug 2>&1 | tee ./reports/ls_coverage_reports.log;
        ls -la ./reports 2>&1 | tee ./reports/ls_reports.log;
        tree -a -f | grep -i app/build/reports | grep -i xml 2>&1 | tee ./reports/tree_report.log;

    - name: Upload reports to cache
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug'
      uses: actions/cache@v2.1.6
      env:
        cache-name: cache-reports
      with:
        path: |
          ./app/build/reports/coverage/debug
          ./reports
        key: reports_${{ matrix.type }}-${{ github.sha }}

    - name: Sign APK
      if: success()
      uses: r0adkll/sign-android-release@v1.0.1
      with:
        releaseDirectory: ./app/build/outputs/apk/${{ matrix.type }}
        signingKeyBase64: ${{ env.SIGNING_KEY }}
        alias: ${{ env.KEY_ALIAS }}
        keyStorePassword: ${{ env.SIGNING_KEY }}
        keyPassword: ${{ env.SIGNING_KEY }}

    - name: Upload APK
      if: success() && startsWith(matrix.os, 'macos')
      uses: actions/upload-artifact@v2
      with:
        name: MobileRT_${{ matrix.type }}_exp
        retention-days: 90
        if-no-files-found: error
        path: |
          ./app/build/outputs/apk/${{ matrix.type }}

    - name: Upload reports
      if: always()
      uses: actions/upload-artifact@v2
      continue-on-error: true
      with:
        name: reports_${{ matrix.type }}_${{ matrix.os }}
        retention-days: 90
        if-no-files-found: error
        path: |
          ./app/build/reports
          ./reports

  Sonar:
    needs: Build

    name: Code Coverage and Sonar
    runs-on: ubuntu-18.04
    timeout-minutes: 60
    env:
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    if: github.event_name == 'push'
    steps:
    - name: Checkout
      if: success()
      uses: actions/checkout@v2.3.4

    - name: Set up JDK
      if: success()
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: 'zulu'

    - name: Download reports from cache
      if: success()
      uses: actions/cache@v2.1.6
      env:
        cache-name: cache-reports
      with:
        path: |
          ./app/build/reports/coverage/debug
          ./reports
        key: reports_debug-${{ github.sha }}

    - name: Check files from cache
      if: success()
      working-directory: .
      run: |
        mkdir -p ./reports;
        chmod +x ./gradlew 2>&1 | tee ./reports/setup_gradlew.log;
        chmod +x ./test-reporter-latest-linux-amd64 2>&1 | tee ./reports/setup_code_climate.log;
        ls -la ./app 2>&1 | tee ./reports/ls_coverage_reports_1.log;
        ls -la ./app/build 2>&1 | tee ./reports/ls_coverage_reports_2.log;
        ls -la ./app/build/reports 2>&1 | tee ./reports/ls_coverage_reports_3.log;
        ls -la ./app/build/reports/coverage 2>&1 | tee ./reports/ls_coverage_reports_4.log;
        ls -la ./app/build/reports/coverage/debug 2>&1 | tee ./reports/ls_coverage_reports.log;
        ls -la ./reports 2>&1 | tee ./reports/ls_reports.log;

    - name: Send code climate report
      if: success()
      working-directory: app/src/main/java
      env:
        CC_TEST_REPORTER_ID: ${{ env.CC_TEST_REPORTER_ID }}
      run: |
        ../../../../test-reporter-latest-linux-amd64 format-coverage -t jacoco ../../../build/reports/coverage/debug/report.xml 2>&1 | tee ../../../../reports/format_coverage.log;
        ../../../../test-reporter-latest-linux-amd64 upload-coverage 2>&1 | tee ../../../../reports/upload_coverage.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Validate codecov report
      if: success()
      working-directory: .
      env:
        CODECOV_TOKEN: ${{ env.CODECOV_TOKEN }}
      run: |
        mkdir -p ./reports;
        curl --retry 5 --retry-delay 2 --connect-timeout 2 --data-binary @codecov.yml https://codecov.io/validate 2>&1 | tee ./reports/validate_codecov.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit 0;

    - name: Analyze Sonar
      if: success()
      working-directory: .
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
      run: |
        mkdir -p ./reports;
        ./gradlew --parallel sonarqube --info 2>&1 | tee ./reports/sonarqube.log;

    - name: Send codecov report
      if: success()
      working-directory: .
      env:
        CODECOV_TOKEN: ${{ env.CODECOV_TOKEN }}
      run: |
        mkdir -p ./reports;
        curl --retry 5 --retry-delay 2 --connect-timeout 2 -s https://codecov.io/bash | bash -s -- -c -F aFlag -f app/build/reports/coverage/debug/report.xml -v 2>&1 | tee ./reports/codecov.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit 0;
