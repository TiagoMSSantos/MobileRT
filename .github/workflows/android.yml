name: Android

on:
  workflow_dispatch:
  push:
    paths-ignore:
    - '*'
    - '.github/**'
    - 'app/debug/**'
    - 'app/release/**'
    - 'app/System_dependent/**'
    - 'docker_image/**'
    - 'docs/**'
    - 'scripts/**'
    - 'WavefrontOBJs/**'
    - '!.github/workflows/android.yml'
    - '!app/System_dependent/CMakeLists.txt'
    - '!app/System_dependent/Android_JNI/**'
    - '!scripts/check_android.sh'
    - '!scripts/compile_android.sh'
    - '!scripts/run_tests.sh'
    - '!scripts/run_tests_android.sh'
    - '!scripts/helper_functions.sh'
    - '!codecov.yml'
    - '!*gradle*'

defaults:
  run:
    shell: bash
    working-directory: .

concurrency:
  group: ${{ github.workflow }} ${{ github.ref }}
  cancel-in-progress: true

# Default environment variables.
env:
  GITHUB_STEP_TIMEOUT_SMALL: 3
  GITHUB_STEP_TIMEOUT_MEDIUM: 6
  GITHUB_STEP_TIMEOUT_LONG: 20
  GITHUB_STEP_TIMEOUT_VERY_LONG: 30

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-20.04
          android_api: 16
          ndk_version: 22.1.7171670
          cmake_version: 3.18.1
          type: release

        - os: ubuntu-22.04
          android_api: 19
          ndk_version: 22.1.7171670
          cmake_version: 3.18.1
          type: debug

        - os: macos-11
          android_api: 29
          ndk_version: 18.1.5063045
          cmake_version: 3.18.1
          type: release

        - os: macos-12
          android_api: 24
          ndk_version: 18.1.5063045
          cmake_version: 3.18.1
          type: debug

    env:
      SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

    name: API ${{ matrix.android_api }} ${{ matrix.type }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/checkout@v3

    - name: Set up JDK
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu'
        check-latest: false
        cache: 'gradle'

    - name: Setup gradlew
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        echo "BASE64_KEY=$(openssl base64 < app/MobileRT.jks | tr -d '\n')" >> "${GITHUB_ENV}";

    - name: Run linter
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      working-directory: .
      run: |
        bash scripts/check_android.sh -n ${{ matrix.ndk_version }} -m ${{ matrix.cmake_version }};

    - name: Run unit tests Java
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        bash scripts/run_tests.sh -t ${{ matrix.type }} -n ${{ matrix.ndk_version }} -m ${{ matrix.cmake_version }};

    - name: Build ${{ matrix.type }}
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: success()
      working-directory: .
      run: |
        bash scripts/compile_android.sh -t ${{ matrix.type }} -r yes -n ${{ matrix.ndk_version }} -m ${{ matrix.cmake_version }};

    - name: Run Android tests
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_VERY_LONG) }}
      if: success() && !startsWith(matrix.os, 'windows')
      uses: ReactiveCircus/android-emulator-runner@v2
      env:
        NCPU_CORES: 3
        MEM_MB: 2048
      with:
        api-level: ${{ matrix.android_api }}
        cmake: ${{ matrix.cmake_version }}
        target: default
        arch: x86
        disable-animations: true
        disable-spellchecker: true
        channel: stable
        emulator-options: -no-window -accel on -cores ${{ env.NCPU_CORES }} -memory ${{ env.MEM_MB }} -cache-size ${{ env.MEM_MB }} -partition-size ${{ env.MEM_MB }} -writable-system -ranchu -fixed-scale -skip-adb-auth -gpu swiftshader_indirect -no-audio -no-snapshot -no-snapstorage -no-snapshot-update-time -no-snapshot-save -no-snapshot-load -no-boot-anim -camera-back none -camera-front none -netfast -wipe-data -no-sim -no-passive-gps -read-only -no-direct-adb -no-location-ui -no-hidpi-scaling -no-mouse-reposition -no-nested-warnings -verbose
        cores: ${{ env.NCPU_CORES }}
        heap-size: ${{ env.MEM_MB }}M
        sdcard-path-or-size: ${{ env.MEM_MB }}M
        ram-size: ${{ env.MEM_MB }}M
        disk-size: ${{ env.MEM_MB }}M
        avd-name: Android_Emulator_API_${{ matrix.android_api }}
        force-avd-creation: true
        disable-linux-hw-accel: auto
        enable-hw-keyboard: false
        script: |
          bash scripts/run_tests_android.sh -t ${{ matrix.type }} -r all -n ${{ matrix.ndk_version }} -m ${{ matrix.cmake_version }} -k false;

    - name: Check report's paths
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug'
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && checkPathExists app/build/reports/coverage/androidTest/debug report.xml;

    - name: Upload reports to cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug'
      uses: actions/cache@v3
      with:
        key: reports_${{ github.sha }}_${{ github.run_id }}_${{ github.run_attempt }}
        restore-keys: reports_${{ github.sha }}_${{ github.run_id }}_${{ github.run_attempt }}
        path: |
          app/build/reports

    - name: Sign APK
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && env.SIGNING_KEY != null && env.KEY_ALIAS != null
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: ./app/build/outputs/apk/${{ matrix.type }}
        signingKeyBase64: ${{ env.BASE64_KEY }}
        alias: ${{ env.KEY_ALIAS }}
        keyStorePassword: ${{ env.SIGNING_KEY }}
        keyPassword: ${{ env.SIGNING_KEY }}

    - name: Upload APK as artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'macos')
      uses: actions/upload-artifact@v3
      with:
        name: MobileRT_${{ matrix.type }}_exp-artifacts
        retention-days: 90
        if-no-files-found: error
        path: |
          ./app/build/outputs/apk/${{ matrix.type }}


  Sonar:
    needs: Build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04 ]
        type: [ debug ]

    name: Code Coverage and Sonar
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    env:
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/checkout@v3

    - name: Set up JDK
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu'
        check-latest: false
        cache: 'gradle'

    - name: Create report's folders
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        mkdir -p app/build/reports;

    - name: Download reports from cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug'
      uses: actions/cache@v3
      with:
        key: reports_${{ github.sha }}_${{ github.run_id }}_${{ github.run_attempt }}
        restore-keys: reports_${{ github.sha }}_${{ github.run_id }}_${{ github.run_attempt }}
        path: |
          app/build/reports

    - name: Check files from reports cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && checkPathExists app/build/reports/coverage/androidTest/debug report.xml;
        env | grep -i runner;

    - name: Send code climate report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && env.CC_TEST_REPORTER_ID != null
      working-directory: app/src/main/java
      env:
        CC_TEST_REPORTER_ID: ${{ env.CC_TEST_REPORTER_ID }}
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . ${{ github.workspace }}/scripts/helper_functions.sh && prepareBinaries;
        ../../../../test-reporter-latest-linux-amd64 format-coverage -t jacoco ../../../build/reports/coverage/androidTest/debug/report.xml;
        ../../../../test-reporter-latest-linux-amd64 upload-coverage;

    - name: Validate codecov report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && env.CODECOV_TOKEN != null
      working-directory: .
      env:
        CODECOV_TOKEN: ${{ env.CODECOV_TOKEN }}
      run: |
        curl --retry 5 --retry-delay 2 --connect-timeout 2 --data-binary @codecov.yml https://codecov.io/validate;

    - name: Set home directory
      id: set-home-directory
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        echo "HOME: ${HOME}";
        echo "::set-output name=HOME::${HOME}";

    # Useful step to avoid gradle having to download Sonar plugins that can take more than 50 min
    # Taken from: https://github.com/marketplace/actions/download-workflow-artifact
    - name: Download Sonar packages artifact
      id: download-sonar-artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: dawidd6/action-download-artifact@v2
      continue-on-error: true
      with:
        # Check default values here:
        # https://github.com/dawidd6/action-download-artifact/blob/master/action.yml
        # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
        # Required, if the artifact is from a different repo
        # Required, if the repo is private a Personal Access Token with `repo` scope is needed
        github_token: ${{ secrets.GITHUB_TOKEN }}
        # Optional, workflow file name or ID
        # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
        workflow: android.yml
        # Optional, the status or conclusion of a completed workflow to search for
        # Can be one of a workflow conclusion:
        #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
        # Or a workflow status:
        #   "completed", "in_progress", "queued"
        # workflow_conclusion: success
        # Optional, will get head commit SHA
        pr: ${{ github.event.pull_request.number }}
        # Optional, no need to specify if PR is
        commit: ${{ github.event.pull_request.head.sha }}
        # Optional, will use the branch
        # branch: master
        # Optional, defaults to all types
        # event: push
        # Optional, will use specified workflow run
        # run_id: 1122334455
        # Optional, run number from the workflow
        # run_number: 34
        # Optional, uploaded artifact name,
        # will download all artifacts if not specified
        # and extract them into respective subdirectories
        # https://github.com/actions/download-artifact#download-all-artifacts
        name: sonar-packages
        # Optional, a directory where to extract artifact(s), defaults to the current directory
        path: ${{ steps.set-home-directory.outputs.HOME }}/.sonar
        # Optional, defaults to current repo
        repo: ${{ github.repository }}
        # Optional, check the workflow run to whether it has an artifact
        # then will get the last available artifact from the previous workflow
        # default false, just try to download from the last one
        check_artifacts:  true
        # Optional, search for the last workflow run whose stored an artifact named as in `name` input
        # default false
        search_artifacts: true
        # Optional, choose to skip unpacking the downloaded artifact(s)
        # default false
        skip_unpack: false

    - name: Extract and check files from sonar artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success() && steps.download-sonar-artifact.outcome == 'success'
      working-directory: .
      run: |
        # shellcheck shell=bash
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && extractFilesFromArtifact ~/.sonar sonar-packages.zip;

    - name: Analyze Sonar
      timeout-minutes: 100
      if: cancelled() != true && env.GITHUB_TOKEN != null && env.SONAR_TOKEN != null
      working-directory: .
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }} # Needed to get PR information, if any
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
      run: |
        bash gradlew --profile --parallel sonarqube --info;

    - name: Upload Sonar packages as artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: cancelled() != true
      uses: actions/upload-artifact@v3
      with:
        name: sonar-packages
        retention-days: 90
        path: |
          ~/.sonar

    - name: Send codecov report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: cancelled() != true && env.CODECOV_TOKEN != null
      working-directory: .
      env:
        CODECOV_TOKEN: ${{ env.CODECOV_TOKEN }}
      run: |
        curl --retry 5 --retry-delay 2 --connect-timeout 2 -s https://codecov.io/bash | bash -s -- -c -F aFlag -f app/build/reports/coverage/androidTest/debug/report.xml -v;
