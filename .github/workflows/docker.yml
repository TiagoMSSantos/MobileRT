name: Docker

on:
  workflow_dispatch:
  push:
    paths-ignore:
    - '*'
    - '.github/**'
    - 'app/debug/**'
    - 'app/release/**'
    - 'app/third_party/conan/**'
    - 'app/System_dependent/**'
    - 'docs/**'
    - 'scripts/**'
    - 'WavefrontOBJs/**'
    - '**/*.java'
    - '**/*.kt'
    - '!.github/workflows/docker.yml'
    - '!app/third_party/conan/Native/**'
    - '!app/System_dependent/CMakeLists.txt'
    - '!app/System_dependent/Android_JNI/**'
    - '!deploy/**'
    - '!scripts/install_dependencies.sh'
    - '!scripts/run_tests.sh'
    - '!scripts/helper_functions.sh'
    - '!scripts/docker.sh'
    - '!scripts/test/dockerfile.sh'
    - '!scripts/profile.sh'
    - '!*gradle*'

defaults:
  run:
    shell: sh
    working-directory: .

concurrency:
  group: ${{ github.workflow }} ${{ github.ref }}
  cancel-in-progress: true

# Default environment variables.
env:
  GITHUB_STEP_TIMEOUT_SMALL: 4
  GITHUB_STEP_TIMEOUT_MEDIUM: 10
  GITHUB_STEP_TIMEOUT_LONG: 30

jobs:
  Build:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-latest
          BASE_IMAGE: ubuntu:22.04
        - os: ubuntu-latest
          BASE_IMAGE: tgagor/centos:stream
        - os: ubuntu-latest
          BASE_IMAGE: archlinux/archlinux:base-devel
        - os: ubuntu-latest
          BASE_IMAGE: alpine:3.19
        - os: ubuntu-latest
          BASE_IMAGE: gentoo/stage3:latest
        - os: macos-latest
          BASE_IMAGE: sickcodes/docker-osx:latest
        - os: windows-latest
          BASE_IMAGE: mcr.microsoft.com/windows/servercore:ltsc2022

    name: ${{ matrix.BASE_IMAGE }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    # Necessary timeout of +/- 300 min to be able to build MobileRT with gentoo.
    # That's why we try to pull a previously available version and update it with a new layer instead.
    timeout-minutes: 300

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/checkout@v4

    - name: Add branch name and version to environment variables
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      shell: bash
      env:
        BASE_IMAGE: ${{ matrix.BASE_IMAGE }}
      run: |
        export BRANCH=${GITHUB_REF#refs/heads/};
        echo "BRANCH: ${BRANCH}";
        echo "BRANCH=${BRANCH}" >> "${GITHUB_ENV}";
        export VERSION="${BASE_IMAGE//\//-}";
        export VERSION="${VERSION//:/-}";
        echo "VERSION=${VERSION}" >> "${GITHUB_ENV}";
        echo 'BUILD_IMAGE=yes' >> "${GITHUB_ENV}";

    - name: Install docker MacOS
      timeout-minutes: 15
      if: success() && startsWith(matrix.os, 'macos')
      env:
        BASE_IMAGE: ${{ matrix.BASE_IMAGE }}
      run: |
        # shellcheck disable=SC1091
        . scripts/docker.sh && installDockerCommandForMacOS;

    - name: Login to DockerHub Registry
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: docker/login-action@v3
      with:
        # Check available parameters in: https://github.com/docker/login-action/blob/master/action.yml
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        ecr: false
        logout: true

    - name: Pull Docker image
      timeout-minutes: 240
      if: success() && (startsWith(matrix.BASE_IMAGE, 'gentoo') || contains(matrix.BASE_IMAGE, 'windows'))
      run: |
        # shellcheck disable=SC1091
        echo "VERSION: ${{ env.VERSION }}";
        . scripts/docker.sh && pullDockerImage ${{ env.VERSION }};
        echo "BUILD_IMAGE=${BUILD_IMAGE}" >> "${GITHUB_ENV}";

    - name: Windows copy necessary tools to workspace
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && env.BUILD_IMAGE == 'yes' && startsWith(matrix.os, 'windows')
      shell: powershell
      run: |
        Write-Host "Copying shell binaries to workspace."
        # where.exe sh
        New-Item -Type dir .\\tools\\binariesShell
        Copy-Item -Path "C:\\Program Files\\Git\\usr\\bin\\*" -Destination ".\\tools\\binariesShell" -Recurse

        Write-Host "Copying resource compiler binaries to workspace."
        # Get-ChildItem -Path "C:\\Program Files (x86)\\Windows Kits\\10\\bin" -Include rc.exe -File -Recurse -ErrorAction SilentlyContinue | ForEach-Object{$_.FullName}
        New-Item -Type dir .\\tools\\binariesResourceCompiler
        Copy-Item -Path "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.22621.0\\x64\\*" -Destination ".\\tools\\binariesResourceCompiler" -Recurse

        Write-Host "Copying nmake binaries to workspace."
        # Get-ChildItem -Path "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Tools\\MSVC" -Include nmake.exe -File -Recurse -ErrorAction SilentlyContinue | ForEach-Object{$_.FullName}
        New-Item -Type dir .\\tools\\binariesNmake
        Copy-Item -Path "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Tools\\MSVC\\14.38.33130\\bin\\Hostx86\\x64\\*" -Destination ".\\tools\\binariesNmake" -Recurse

    - name: Build Docker image
      timeout-minutes: 300
      if: success() && env.BUILD_IMAGE == 'yes'
      run: |
        # shellcheck disable=SC1091
        echo "BASE_IMAGE: ${{ matrix.BASE_IMAGE }}";
        echo "BRANCH: ${{ env.BRANCH }}";
        echo "VERSION: ${{ env.VERSION }}";
        . scripts/docker.sh && buildDockerImage ${{ matrix.BASE_IMAGE }} ${{ env.BRANCH }} ${{ env.VERSION }};

    - name: Build MobileRT
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: success() && env.BUILD_IMAGE != 'yes'
      run: |
        # shellcheck disable=SC1091
        echo "VERSION: ${{ env.VERSION }}";
        . scripts/docker.sh && compileMobileRTInDockerContainer ${{ env.VERSION }};

    - name: Commit MobileRT Docker image layer
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && env.BUILD_IMAGE != 'yes'
      run: |
        # shellcheck disable=SC1091
        echo "VERSION: ${{ env.VERSION }}";
        . scripts/docker.sh && commitMobileRTDockerImage ${{ env.VERSION }};

    - name: Squash Docker image
      timeout-minutes: 120
      if: success() && env.BRANCH == 'master' && startsWith(matrix.BASE_IMAGE, 'gentoo') && false
      run: |
        # shellcheck disable=SC1091
        echo "VERSION: ${{ env.VERSION }}";
        . scripts/docker.sh && squashMobileRTDockerImage ${{ env.VERSION }};

    - name: Run unit tests
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      run: |
        # shellcheck disable=SC1091
        echo "VERSION: ${{ env.VERSION }}";
        . scripts/docker.sh && executeUnitTestsInDockerContainer ${{ env.VERSION }} --gtest_filter=-*Engine*;

    - name: Run unit tests Ray Tracing engine (for code coverage)
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      run: |
        # shellcheck disable=SC1091
        echo "VERSION: ${{ env.VERSION }}";
        . scripts/docker.sh && executeUnitTestsInDockerContainer ${{ env.VERSION }} --gtest_filter=*Engine*;

    - name: Run Dockerfile unit tests
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        if echo "${{ matrix.BASE_IMAGE }}" | grep -q "alpine"; then
          sh scripts/test/dockerfile.sh ${{ env.VERSION }} 143; # Expect SIGTERM (15). 128 + 15 = 143
        else
          sh scripts/test/dockerfile.sh ${{ env.VERSION }};
        fi

    - name: Push Docker image
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: success() && env.BRANCH == 'master'
      run: |
        # shellcheck disable=SC1091
        echo "VERSION: ${{ env.VERSION }}";
        . scripts/docker.sh && pushMobileRTDockerImage ${{ env.VERSION }};
