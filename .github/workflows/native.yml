name: Native (Qt)

on:
  workflow_dispatch:
  push:
    paths-ignore:
    - '*'
    - '.github/**'
    - 'app/*'
    - 'app/debug/**'
    - 'app/release/**'
    - 'app/System_dependent/**'
    - 'docker_image/**'
    - 'docs/**'
    - 'scripts/**'
    - 'WavefrontOBJs/**'
    - '!.github/workflows/native.yml'
    - '!app/CMakeLists.txt'
    - '!app/build.gradle'
    - '!app/System_dependent/CMakeLists.txt'
    - '!app/System_dependent/Native/**'
    - '!scripts/compile_native.sh'
    - '!scripts/helper_functions.sh'
    - '!scripts/install_dependencies.sh'
    - '!build.gradle'
    - '!codecov.yml'

defaults:
  run:
    shell: bash
    working-directory: .

concurrency:
  group: ${{ github.workflow }} ${{ github.ref }}
  cancel-in-progress: true

# Default environment variables.
env:
  GITHUB_STEP_TIMEOUT_SMALL: 2
  GITHUB_STEP_TIMEOUT_MEDIUM: 6
  GITHUB_STEP_TIMEOUT_LONG: 20

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-22.04
          type: release
          compiler: g++

        - os: ubuntu-20.04
          type: release
          compiler: clang++

        - os: ubuntu-20.04
          type: debug
          compiler: g++

        - os: ubuntu-18.04
          type: debug
          compiler: clang++

        - os: macos-12
          type: release
          compiler: g++

        - os: macos-11
          type: release
          compiler: clang++

        - os: macos-11
          type: debug
          compiler: g++

        - os: macos-12
          type: debug
          compiler: clang++

    name: ${{ matrix.type }} ${{ matrix.compiler }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      uses: actions/checkout@v3

    - name: Setup build directory
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        set -euo pipefail;
        mkdir -p build_${{ matrix.type }};

    - name: Setup code climate report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        mkdir -p ./reports;
        chmod +x ./test-reporter-latest-linux-amd64 2>&1 | tee ./reports/setup_code_climate.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Install Dependencies
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: success()
      working-directory: .
      run: |
        bash scripts/install_dependencies.sh;

    - name: Create symlink of headers MacOS
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'macos')
      working-directory: .
      run: |
        find /usr/local -iname "Find*Qt*.cmake" 2> /dev/null;
        echo "Checking available versions of Xcode.";
        ls -lah /System/Volumes/Data/Applications;

        echo "Define Qt versions.";
        ls -lah /usr/local/Cellar/;
        export QT_4_VERSION="$(ls /usr/local/Cellar/qt@4/ | head -1)";
        # export QT_5_VERSION="$(ls /usr/local/Cellar/qt@5/ | head -1)";
        echo "QT_4_VERSION=${QT_4_VERSION}" >> ${GITHUB_ENV};
        echo "QT_5_VERSION=${QT_5_VERSION}" >> ${GITHUB_ENV};

        echo "Check Qt 5 paths exist.";
        # Qt5 might fail while installing via homebrew.
        # ls -lah /usr/local/Cellar/qt@5/;
        # ls -lah /usr/local/Cellar/qt@5/${QT_5_VERSION}/lib/;
        # ls -lah /usr/local/Cellar/qt@5/${QT_5_VERSION}/lib/QtCore.framework/Versions/5/Headers/;
        # ls -lah /usr/local/Cellar/qt@5/${QT_5_VERSION}/lib/QtGui.framework/Versions/5/Headers/;
        # ls -lah /usr/local/Cellar/qt@5/${QT_5_VERSION}/lib/QtWidgets.framework/Versions/5/Headers/

        echo "Check Qt 4 paths exist.";
        ls -lah /usr/local/Cellar/qt@4/;
        ls -lah /usr/local/Cellar/qt@4/${QT_4_VERSION}/lib/;
        ls -lah /usr/local/Cellar/qt@4/${QT_4_VERSION}/lib/QtCore.framework/Versions/4/Headers/;
        ls -lah /usr/local/Cellar/qt@4/${QT_4_VERSION}/lib/QtGui.framework/Versions/4/Headers/;
        # For Qt4, QtWidgets headers are inside QtGui folder.

        echo "Create paths for Qt.";
        mkdir -p /usr/local/include/Qt/Qt/;
        mkdir -p /usr/local/include/Qt/QtCore/;
        mkdir -p /usr/local/include/Qt/QtGui/;
        mkdir -p /usr/local/include/Qt/QtWidgets/;

        echo "Create symbolic links for Qt 5 headers.";
        # rsync -av --keep-dirlinks /usr/local/Cellar/qt@5/${QT_5_VERSION}/lib/QtCore.framework/Versions/5/Headers/ /usr/local/include/Qt/QtCore;
        # rsync -av --keep-dirlinks /usr/local/Cellar/qt@5/${QT_5_VERSION}/lib/QtGui.framework/Versions/5/Headers/ /usr/local/include/Qt/QtGui;
        # rsync -av --keep-dirlinks /usr/local/Cellar/qt@5/${QT_5_VERSION}/lib/QtWidgets.framework/Versions/5/Headers/ /usr/local/include/Qt/QtWidgets;

        echo "Create symbolic links for Qt 4 headers.";
        rsync -av --keep-dirlinks /usr/local/Cellar/qt@4/${QT_4_VERSION}/lib/QtCore.framework/Versions/4/Headers/ /usr/local/include/Qt/QtCore;
        rsync -av --keep-dirlinks /usr/local/Cellar/qt@4/${QT_4_VERSION}/lib/QtGui.framework/Versions/4/Headers/ /usr/local/include/Qt/QtGui;
        rsync -av --keep-dirlinks /usr/local/Cellar/qt@4/${QT_4_VERSION}/lib/QtGui.framework/Versions/4/Headers/ /usr/local/include/Qt/QtWidgets;

        echo "Searching for some Qt widgets headers.";
        find ~/ -iname "qtwidgetsglobal.h" 2> /dev/null;

        echo "Create symbolic links to mix all Qt headers."
        rsync -av --keep-dirlinks /usr/local/include/Qt/QtCore/ /usr/local/include/Qt/Qt;
        rsync -av --keep-dirlinks /usr/local/include/Qt/QtGui/ /usr/local/include/Qt/Qt;
        rsync -av --keep-dirlinks /usr/local/include/Qt/QtWidgets/ /usr/local/include/Qt/Qt;

        echo "Update include and library paths.";
        export CPLUS_INCLUDE_PATH="/usr/local/include/Qt/:${CPLUS_INCLUDE_PATH}";
        export CPLUS_INCLUDE_PATH="/usr/local/include/Qt/QtCore/:${CPLUS_INCLUDE_PATH}";
        export CPLUS_INCLUDE_PATH="/usr/local/include/Qt/QtGui/:${CPLUS_INCLUDE_PATH}";
        export CPLUS_INCLUDE_PATH="/usr/local/include/Qt/QtWidgets/:${CPLUS_INCLUDE_PATH}";
        # export LIBRARY_PATH="/usr/local/Cellar/qt@5/${QT_5_VERSION}/lib/:${LIBRARY_PATH}";
        echo "CPLUS_INCLUDE_PATH=${CPLUS_INCLUDE_PATH}" >> ${GITHUB_ENV};
        echo "LIBRARY_PATH=${LIBRARY_PATH}" >> ${GITHUB_ENV};

        # export LDFLAGS="-L/usr/local/opt/qt@5/lib";
        # export CPPFLAGS="-I/usr/local/opt/qt@5/include";
        # export PKG_CONFIG_PATH="/usr/local/opt/qt@5/lib/pkgconfig";
        echo "LDFLAGS=${LDFLAGS}" >> ${GITHUB_ENV};
        echo "CPPFLAGS=${CPPFLAGS}" >> ${GITHUB_ENV};
        echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}" >> ${GITHUB_ENV};

        echo "Check Qt files.";
        ls -lah /usr/local/include/Qt/QtWidgets/;
        # ls -lahR /usr/local/Cellar/qt@5/ | grep -ine "\.a" -ine "\.so" -ine "\.dylib";
        # lipo -info /usr/local/Cellar/qt@5/${QT_5_VERSION}/Frameworks/QtCore.framework;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Build ${{ matrix.type }}
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      working-directory: .
      run: |
        export QT_5_VERSION=${{ env.QT_5_VERSION }};
        echo "QT_5_VERSION: '${QT_5_VERSION}'";
        export QT_4_VERSION=${{ env.QT_4_VERSION }};
        echo "QT_4_VERSION: '${QT_4_VERSION}'";
        export LDFLAGS=${{ env.LDFLAGS }};
        echo "LDFLAGS: '${LDFLAGS}'";
        export CPPFLAGS=${{ env.CPPFLAGS }};
        echo "CPPFLAGS: '${CPPFLAGS}'";
        export PKG_CONFIG_PATH=${{ env.PKG_CONFIG_PATH }};
        echo "PKG_CONFIG_PATH: '${PKG_CONFIG_PATH}'";

        bash scripts/compile_native.sh -t ${{ matrix.type }} -c ${{ matrix.compiler }} 2>&1 | tee ./reports/run_cmake.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Check build path
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: build_${{ matrix.type }}
      run: |
        find . -iname "*.so" 2> /dev/null;
        ls -lahR ./bin ./lib;

    - name: Generate code coverage base
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && matrix.compiler == 'g++' && matrix.type == 'debug' && startsWith(matrix.os, 'ubuntu')
      working-directory: .
      run: |
        lcov -c -i -d . --no-external -o code_coverage_base.info 2>&1 | tee ./reports/generate_code_coverage_base.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Run unit tests Debug
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && matrix.type == 'debug'
      working-directory: build_${{ matrix.type }}
      run: |
        mkdir -p ./reports;
        DYLD_FALLBACK_LIBRARY_PATH=./lib ./bin/UnitTestsd 2>&1 | tee ./reports/unit_tests.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Run unit tests Release
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && matrix.type == 'release'
      working-directory: build_${{ matrix.type }}
      run: |
        mkdir -p ./reports;
        DYLD_FALLBACK_LIBRARY_PATH=./lib ./bin/UnitTests 2>&1 | tee ./reports/unit_tests.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Generate code coverage
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && matrix.compiler == 'g++' && matrix.type == 'debug' && startsWith(matrix.os, 'ubuntu')
      working-directory: .
      run: |
        lcov -c -d . --no-external -o code_coverage_test.info 2>&1 | tee ./reports/code_coverage_1.log;
        lcov -a code_coverage_base.info -a code_coverage_test.info -o code_coverage.info 2>&1 | tee ./reports/code_coverage_2.log;
        lcov --remove code_coverage.info -o code_coverage.info '*third_party*' '*build*' 2>&1 | tee ./reports/code_coverage_3.log;
        genhtml code_coverage.info -o code_coverage_report --no-branch-coverage -t MobileRT_code_coverage  2>&1 | tee ./reports/code_coverage_4.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Upload coverage to cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && matrix.compiler == 'g++' && matrix.type == 'debug' && startsWith(matrix.os, 'ubuntu')
      uses: actions/cache@v3
      env:
        cache-name: cache-reports
      with:
        path: |
          ./app/build/reports/coverage/androidTest/debug
          ./reports
          ./code_coverage_base.info
          ./code_coverage.info
          ./code_coverage_test.info
        key: reports_${{ matrix.type }}-${{ github.sha }}

    - name: Upload reports
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: always()
      uses: actions/upload-artifact@v3
      continue-on-error: true
      with:
        name: reports_${{ matrix.type }}_${{ matrix.os }}
        retention-days: 90
        if-no-files-found: error
        path: |
          ./reports

  Sonar:
    needs: Build

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04 ]
        type: [ debug ]

    name: Code Coverage
    runs-on: ${{ matrix.os }}
    timeout-minutes: 3
    env:
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/checkout@v3

    - name: Download reports from cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/cache@v3
      env:
        cache-name: cache-reports
      with:
        path: |
          ./app/build/reports/coverage/androidTest/debug
          ./reports
          ./code_coverage_base.info
          ./code_coverage.info
          ./code_coverage_test.info
        key: reports_debug-${{ github.sha }}
        restore-keys: reports_debug

    - name: Send code climate report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && env.CC_TEST_REPORTER_ID != null
      working-directory: .
      env:
        CC_TEST_REPORTER_ID: ${{ env.CC_TEST_REPORTER_ID }}
      run: |
        mkdir -p reports;
        chmod +x ./test-reporter-latest-linux-amd64 2>&1 | tee ./reports/setup_code_climate.log;
        ./test-reporter-latest-linux-amd64 format-coverage -t lcov code_coverage.info 2>&1 | tee ./reports/format_coverage.log;
        ./test-reporter-latest-linux-amd64 upload-coverage 2>&1 | tee ./reports/upload_coverage.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit ${res};

    - name: Validate codecov report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && env.CODECOV_TOKEN != null
      working-directory: .
      env:
        CODECOV_TOKEN: ${{ env.CODECOV_TOKEN }}
      run: |
        curl --retry 5 --retry-delay 2 --connect-timeout 2 --data-binary @codecov.yml https://codecov.io/validate 2>&1 | tee ./reports/validate_codecov.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit 0;

    - name: Send codecov report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && env.CODECOV_TOKEN != null
      working-directory: .
      env:
        CODECOV_TOKEN: ${{ env.CODECOV_TOKEN }}
      run: |
        curl --retry 5 --retry-delay 2 --connect-timeout 2 -s https://codecov.io/bash | bash -s -- -c -F aFlag ./build_${{ matrix.type }} -v 2>&1 | tee ./reports/send_codecov_report.log;
        export res="${PIPESTATUS[0]}";
        echo "Result: '${res}'";
        exit 0;
