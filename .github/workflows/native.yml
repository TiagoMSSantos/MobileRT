name: Native (Qt)

on:
  workflow_dispatch:
  push:
    paths-ignore:
    - '*'
    - '.github/**'
    - 'app/debug/**'
    - 'app/release/**'
    - 'app/third_party/conan/**'
    - 'app/System_dependent/**'
    - 'deploy/**'
    - 'docs/**'
    - 'scripts/**'
    - 'WavefrontOBJs/**'
    - '!app/System_dependent/CMakeLists.txt'
    - '!scripts/run_tests.sh'
    - '!scripts/helper_functions.sh'
    - '!scripts/install_dependencies.sh'
    - '!app/CMakeLists.txt'
    - '!codecov.yml'
    - '!.github/workflows/android.yml'
    - '!.github/workflows/native.yml'
    - '!app/third_party/conan/Native/**'
    - '!app/System_dependent/Native/**'
    - '!.github/workflows/android_matrix.json'
    - '!app/third_party/conan/Android/**'
    - '!app/System_dependent/Android_JNI/**'
    - '!scripts/compile_android.sh'
    - '!scripts/compile_native.sh'
    - '!scripts/check_android.sh'
    - '!scripts/run_tests_android.sh'
    - '!*.java*'
    - '!*.kt*'
    - '!*.c*'
    - '!*.h*'
    - '!*gradle*'

defaults:
  run:
    shell: sh
    working-directory: .

concurrency:
  group: ${{ github.workflow }} ${{ github.ref }}
  cancel-in-progress: true

# Default environment variables.
env:
  GITHUB_STEP_TIMEOUT_SMALL: 4
  GITHUB_STEP_TIMEOUT_MEDIUM: 10
  GITHUB_STEP_TIMEOUT_LONG: 30

jobs:
  Build:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    outputs:
      matrix-sonar: ${{ steps.set-matrix-sonar.outputs.matrix-sonar }}

    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-22.04
          type: release
          compiler: g++

        - os: ubuntu-20.04
          type: release
          compiler: clang++

        - os: ubuntu-20.04
          type: debug
          compiler: g++

        - os: ubuntu-22.04
          type: debug
          compiler: clang++

        - os: macos-12
          type: release
          compiler: g++

        - os: macos-11
          type: release
          compiler: clang++

        - os: macos-11
          type: debug
          compiler: g++

        - os: macos-12
          type: debug
          compiler: clang++

    name: ${{ matrix.type }} ${{ matrix.compiler }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/checkout@v4

    - name: Setup build directory
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        mkdir -p build_${{ matrix.type }};

    - name: Check MacOS Xcode versions
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'macos')
      working-directory: .
      run: |
        ls -lahp /System/Volumes/Data/Applications/;

    - name: Install Dependencies
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: success()
      working-directory: .
      run: |
        sh scripts/install_dependencies.sh;

    - name: Install Qt MacOS
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success() && startsWith(matrix.os, 'macos')
      uses: jurplel/install-qt-action@v3
      # Download Qt from: https://download.qt.io/online/qtsdkrepository/
      with:
        # Check available parameters in: https://github.com/jurplel/install-qt-action/blob/master/action.yml
        version: '5.15.2' # Also update: app/CMakeLists.txt
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        dir: '${{ github.workspace }}'
        install-deps: 'true'
        modules: ''
        cache: 'true'
        cache-key-prefix: '${{ runner.os }}'
        setup-python: 'false'
        set-env: 'true'
        tools-only: 'false'
        aqtversion: '==2.1.*'
        py7zrversion: '==0.19.*'
        extra: '--external 7z'

    - name: Check Qt path installation.
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'macos')
      working-directory: .
      run: |
        env | grep -i qt;
        du -h -d 1 Qt;

    - name: Build ${{ matrix.type }}
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: success()
      working-directory: .
      run: |
        sh scripts/compile_native.sh -t ${{ matrix.type }} -c ${{ matrix.compiler }};

    - name: Generate code coverage base
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug' && startsWith(matrix.compiler, 'g++')
      working-directory: .
      run: |
        lcov -c -i -d . --no-external -o code_coverage_base.info;

    - name: Run unit tests
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: build_${{ matrix.type }}
      run: |
        LD_LIBRARY_PATH=$(find ~/.conan -iname "libgtest.so" | grep -iv "build" | xargs ls -t | head -1 | xargs dirname) ./bin/UnitTests* --gtest_filter=-*Engine*;

    - name: Run unit tests Ray Tracing engine (for code coverage)
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        ls -la ./app/src/androidTest/resources/CornellBox/CornellBox-Water.obj;
        ls -la ./app/src/androidTest/resources/CornellBox/CornellBox-Water.mtl;
        ls -la ./app/src/androidTest/resources/CornellBox/CornellBox-Water.cam;
        LD_LIBRARY_PATH=$(find ~/.conan -iname "libgtest.so" | grep -iv "build" | xargs ls -t | head -1 | xargs dirname) ./build_${{ matrix.type }}/bin/UnitTests* --gtest_filter=*Engine*;

    - name: Test profile script ${{ matrix.type }}
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && !startsWith(matrix.os, 'macos')
      working-directory: .
      run: |
        set +e;
        QT_QPA_PLATFORM='offscreen' timeout 4 sh ./scripts/profile.sh "${{ matrix.type }}" 100;
        returnValue="$?";
        set -e;
        # shellcheck disable=SC1091
        . scripts/test/utils.sh && assertEqual '124' "${returnValue}" "test profile script: ${{ matrix.type }}";
        if [ "${returnValue}" != '124' ]; then
          exit "${returnValue}"; # Exit with error if test failed.
        fi

    - name: Generate code coverage
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug' && startsWith(matrix.compiler, 'g++')
      working-directory: .
      run: |
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && generateCodeCoverage;

    - name: Set Matrix for Sonar
      id: set-matrix-sonar
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug' && startsWith(matrix.compiler, 'g++')
      run: |
        MATRIX_SONAR=$(echo '${{ toJSON(matrix) }}' | jq -c -s '{"include":[.[]]}');
        echo "Matrix Sonar: ${MATRIX_SONAR}";
        echo "matrix-sonar=${MATRIX_SONAR}" >> ${GITHUB_OUTPUT};

    - name: Upload coverage to cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && startsWith(matrix.os, 'ubuntu') && matrix.type == 'debug' && startsWith(matrix.compiler, 'g++')
      uses: actions/cache@v3
      with:
        # Check available parameters in: https://github.com/actions/cache/blob/main/action.yml
        key: reports_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        restore-keys: reports_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        path: |
          app/build/reports/coverage/androidTest/debug/connected
          code_coverage_base.info
          code_coverage.info
          code_coverage_test.info
          code_coverage_filtered.info


  Sonar:
    needs: [Build]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.Build.outputs.matrix-sonar) }}

    name: Code Coverage
    runs-on: ${{ matrix.os }}
    timeout-minutes: 3

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: actions/checkout@v4

    - name: Download reports from cache
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/cache@v3
      with:
        # Check available parameters in: https://github.com/actions/cache/blob/main/action.yml
        key: reports_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        restore-keys: reports_${{ github.sha }}_${{ github.run_id }}_${{ matrix.type }}_${{ matrix.os }}
        path: |
          app/build/reports/coverage/androidTest/debug/connected
          code_coverage_base.info
          code_coverage.info
          code_coverage_test.info
          code_coverage_filtered.info

    - name: Send code climate report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      run: |
        # shellcheck disable=SC1091
        . scripts/helper_functions.sh && prepareBinaries ${{ github.workspace }};
        ./test-reporter-latest-linux-amd64 format-coverage -t lcov code_coverage_filtered.info;
        ./test-reporter-latest-linux-amd64 upload-coverage;

    - name: Validate codecov report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      run: |
        curl --retry 5 --retry-delay 2 --connect-timeout 2 --data-binary @codecov.yml https://codecov.io/validate;

    - name: Send codecov report
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      working-directory: .
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        curl --retry 5 --retry-delay 2 --connect-timeout 2 -s https://codecov.io/bash | bash -s -- -c -F aFlag build_${{ matrix.type }} -v;
