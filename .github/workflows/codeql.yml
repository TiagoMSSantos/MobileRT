name: Code Analysis

on:
  workflow_dispatch:
  push:
    paths-ignore:
    - '*'
    - '**/**'
    - '!.github/workflows/codeql.yml'
    - '!.github/workflows/codeql-matrix.json'
    - '!.github/codeql/codeql-config.yml'
    - '!codecov.yml'
    - '!Gemfile'
    - '!scripts/install_dependencies.sh'
    - '!scripts/helper_functions.sh'
    - '!scripts/compile_native.sh'
    - '!scripts/test/**'
    - '!app/third_party/conan/Native/**'
    - '!app/third_party/conan/Android/**'
    - '!**/CMakeLists*'
    - '!**/*.java*'
    - '!**/*.kt*'
    - '!**/*.c*'
    - '!**/*.h'
    - '!**/*.hpp'
    - '!**/*gradle*'
    - '!**/*.rs'
    - '!**/*.js'

permissions: {}

defaults:
  run:
    shell: sh
    working-directory: .

concurrency:
  group: ${{ github.workflow }} ${{ github.ref }}
  cancel-in-progress: true

# Default environment variables.
env:
  GITHUB_STEP_TIMEOUT_SMALL: 4
  GITHUB_STEP_TIMEOUT_MEDIUM: 10
  GITHUB_STEP_TIMEOUT_LONG: 20

jobs:
  Matrix:
    name: Set Matrix
    runs-on: macos-latest
    timeout-minutes: 2

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout
        timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
        if: success()
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set Matrix
        id: set-matrix
        timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
        if: success()
        run: |
          MATRIX=$(echo $(cat .github/workflows/codeql-matrix.json) | sed 's/ //g');
          echo "Matrix: ${MATRIX}";
          echo "matrix=${MATRIX}" >> ${GITHUB_OUTPUT};


  Build:
    needs: [Matrix]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.Matrix.outputs.matrix) }}
      # Supported options are ['c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift', 'actions']
      # Learn more: https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning#changing-the-languages-that-are-analyzed

    name: Analyze ${{ matrix.language }} (${{ matrix.host_os }})
    runs-on: ${{ matrix.host_os }}
    timeout-minutes: 360

    # Sets permissions of the GITHUB_TOKEN to allow update the status of code scanning alerts
    permissions:
      security-events: write

    steps:
    - name: Checkout
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up JDK
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && matrix.language == 'java-kotlin'
      uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4
      with:
        # Check available parameters in: https://github.com/actions/setup-java/blob/main/action.yml
        java-version: 21
        distribution: zulu
        java-package: jdk
        check-latest: false
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN
        settings-path: ~/.gradle
        overwrite-settings: true
        gpg-private-key: ''
        gpg-passphrase: GPG_PASSPHRASE
        cache: gradle
        cache-dependency-path: '**/build.gradle'

    - name: Add project root path
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: success()
      run: |
        if [ ${{ matrix.language }} = 'rust' ]; then
          echo 'source_root=app/web-server' >> "${GITHUB_ENV}";
        else
          echo 'source_root=.' >> "${GITHUB_ENV}";
        fi

    - name: Check available Android versions
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: success() && matrix.language == 'java-kotlin'
      run: |
        echo 'Available Android versions:';
        du -h -d 1 ${ANDROID_HOME}/ndk;
        du -h -d 1 ${ANDROID_HOME}/cmake || true;
        du -h -d 1 ${ANDROID_HOME}/build-tools;
        ls -lahp ${ANDROID_HOME}/platforms;
        ls -lahp ${HOME};

    - name: Initialize CodeQL tools for scanning
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: github/codeql-action/init@181d5eefc20863364f96762470ba6f862bdef56b # v3
      env:
        CODEQL_ENABLE_EXPERIMENTAL_FEATURES: 'true'
      with:
        # Check available parameters in: https://github.com/github/codeql-action/blob/main/init/action.yml
        languages: ${{ matrix.language }}
        token: ${{ github.token }}
        matrix: ${{ toJson(matrix) }}
        config-file: .github/codeql/codeql-config.yml
        source-root: ${{ env.source_root }}
        debug: true

    - name: Set Qt CPU Architecture (Windows & MacOS)
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && (startsWith(matrix.host_os, 'windows') || startsWith(matrix.host_os, 'macos'))
      run: |
        if [ ${{ startsWith(inputs.host_os, 'windows') }} = true ]; then
          echo 'qt_host=windows' >> "${GITHUB_ENV}";
          echo 'qt_arch=win64_msvc2019_64' >> "${GITHUB_ENV}";
        elif [ ${{ startsWith(inputs.host_os, 'macos') }} = true ]; then
          echo 'qt_host=mac' >> "${GITHUB_ENV}";
          echo 'qt_arch=clang_64' >> "${GITHUB_ENV}";
        else
          exit 1;
        fi

    - name: Install Qt (Windows & MacOS)
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success() && (startsWith(matrix.host_os, 'windows') || startsWith(matrix.host_os, 'macos'))
      uses: jurplel/install-qt-action@d325aaf2a8baeeda41ad0b5d39f84a6af9bcf005 # v4.3.0
      # Download Qt from: https://download.qt.io/online/qtsdkrepository/
      with:
        # Check available parameters in: https://github.com/jurplel/install-qt-action/blob/master/action.yml
        version: '5.15.2' # Also update: app/CMakeLists.txt
        host: '${{ env.qt_host }}'
        target: 'desktop'
        arch: '${{ env.qt_arch }}'
        dir: '${{ github.workspace }}'
        install-deps: 'false'
        modules: ''
        cache: 'true'
        cache-key-prefix: '${{ env.qt_host }}-${{ env.qt_arch }}'
        setup-python: 'true'
        set-env: 'true'
        py7zrversion: '>=1.0.0'

    - name: Install dependencies
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && (matrix.language == 'c-cpp' || matrix.language == 'rust')
      run: |
        sh scripts/install_dependencies.sh;

    - name: Download Android CMake
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && matrix.language == 'java-kotlin' && !startsWith(matrix.host_os, 'windows')
      run: |
        ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install 'cmake;4.0.2';

    - name: Download Android CMake Windows
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && matrix.language == 'java-kotlin' && startsWith(matrix.host_os, 'windows')
      run: |
        ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager.bat --install 'cmake;4.0.2';

    - name: Autobuild
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: success() && matrix.language == 'java-kotlin'
      uses: github/codeql-action/autobuild@181d5eefc20863364f96762470ba6f862bdef56b # v3
      continue-on-error: false
      env:
        MAKEFLAGS: "-j$(($(nproc --all) * 2 - 1))"
        GRADLE_OPTS: '-Xms8G -Xmx8G -XX:ActiveProcessorCount=5'
      with:
        # Check available parameters in: https://github.com/github/codeql-action/blob/main/autobuild/action.yml
        token: ${{ github.token }}
        matrix: ${{ toJson(matrix) }}
        working-directory: ${{ env.source_root }}

    - name: Validate Gradle Wrapper
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && matrix.language == 'java-kotlin'
      uses: gradle/actions/wrapper-validation@ac638b010cf58a27ee6c972d7336334ccaf61c96 # v4.4.1
      with:
        # Check available parameters in: https://github.com/gradle/actions/blob/main/wrapper-validation/action.yml
        min-wrapper-count: 1
        allow-snapshots: false
        allow-checksums: ''

    - name: Set C++ compiler
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success() && (matrix.language == 'c-cpp' || matrix.language == 'rust')
      run: |
        if [ ${{ startsWith(matrix.host_os, 'windows') }} = true ]; then
          echo 'compiler=cl' >> "${GITHUB_ENV}";
        else
          echo 'compiler=g++' >> "${GITHUB_ENV}";
        fi

    - name: Build C++
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: success() && matrix.language == 'c-cpp'
      run: |
        sh scripts/compile_native.sh -t debug -c ${{ env.compiler }} -r yes;

    - name: Build Rust Web Server
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_LONG) }}
      if: success() && matrix.language == 'rust'
      run: |
        sh scripts/compile_native.sh -t release -c ${{ env.compiler }} -r yes;
        cd ${{ env.source_root }};
        make build_debug;

    - name: Perform CodeQL Analysis
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_MEDIUM) }}
      if: success()
      uses: github/codeql-action/analyze@181d5eefc20863364f96762470ba6f862bdef56b # v3
      with:
        # Check available parameters in: https://github.com/github/codeql-action/blob/main/analyze/action.yml
        check_name: CodeQL
        output: codeql-results
        upload: never
        # Check cleanup-level in: https://codeql.github.com/docs/codeql-cli/manual/database-cleanup/
        cleanup-level: brutal
        skip-queries: false
        checkout_path: ${{ github.workspace }}
        # ref: ${GITHUB_REF} does not match /^refs\/(heads|pull|tags)\/.*$/.
        # sha: ${GITHUB_SHA} does not match /^[0-9a-fA-F]+$/.
        # category: String used by Code Scanning for matching the analyses. Not required.
        # category: CodeQL
        upload-database: true
        wait-for-processing: true
        token: ${{ github.token }}
        matrix: ${{ toJson(matrix) }}

    - name: Validate CodeQL output was generated
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      run: |
        ls -lahp ./codeql-results;
        if [ "${{ matrix.language }}" = 'c-cpp' ]; then
          LANGUAGE='cpp';
        elif [ "${{ matrix.language }}" = 'java-kotlin' ]; then
          LANGUAGE='java';
        elif [ "${{ matrix.language }}" = 'javascript-typescript' ]; then
          LANGUAGE='javascript';
        else
          LANGUAGE="${{ matrix.language }}";
        fi
        echo "LANGUAGE: ${LANGUAGE}";
        echo "LANGUAGE=${LANGUAGE}" >> ${GITHUB_ENV};
        ls -lahp ./codeql-results/${LANGUAGE}.sarif;

    - name: Filter SARIF
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: advanced-security/filter-sarif@f3b8118a9349d88f7b1c0c488476411145b6270d # v1
      with:
        # Check available parameters in: https://github.com/advanced-security/filter-sarif/blob/main/action.yml
        patterns: |
          -**/third_party/**/*:**
          -**/build_*/**/*:**
          -**/build/**/*:**
          -**/jscpd-report/**/*:**
          -**/mobilert-chart/templates/**/*:**
          -**/target/**/*:**
          -**/.rustup/**/*:**
          -**/.cargo/**/*:**
          -**/hostedtoolcache/**/*:**
        input: ./codeql-results/${{ env.LANGUAGE }}.sarif
        output: ./codeql-results/${{ env.LANGUAGE }}-filtered.sarif

    - name: Validate CodeQL output was generated
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      run: |
        ls -lahp ./codeql-results;
        ls -lahp ./codeql-results/${{ env.LANGUAGE }}.sarif;
        ls -lahp ./codeql-results/${{ env.LANGUAGE }}-filtered.sarif;

    - name: Upload SARIF
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: github/codeql-action/upload-sarif@181d5eefc20863364f96762470ba6f862bdef56b # v3
      with:
        # Check available parameters in: https://github.com/github/codeql-action/blob/main/upload-sarif/action.yml
        sarif_file: ./codeql-results/${{ env.LANGUAGE }}-filtered.sarif

    - name: Upload reports as artifact
      timeout-minutes: ${{ fromJSON(env.GITHUB_STEP_TIMEOUT_SMALL) }}
      if: success()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        # Check available parameters in: https://github.com/actions/upload-artifact/blob/main/action.yml
        name: sarif_${{ matrix.language }}_${{ matrix.host_os }}-artifacts
        path: codeql-results
        if-no-files-found: error
        retention-days: 90
        overwrite: true
        include-hidden-files: true
