import com.android.ddmlib.DdmPreferences

///////////////////////////////////////////////////////////////////////////////
// Apply plugins
///////////////////////////////////////////////////////////////////////////////
plugins {
    // JaCoCo plugin provides code coverage metrics for Java code via
    // integration with JaCoCo.
    id 'jacoco'

    // Application plugin facilitates creating an executable JVM application.
    id 'com.android.application'

    // Gradle plugin for running SonarQube analysis.
    id 'org.sonarqube'

    // Pitest provides an ability to perform a mutation testing and calculate a
    // mutation coverage of a Gradle-based projects with PIT.
//    id 'info.solidsoft.pitest'

    // Generates an HTML dependency report. This report combines the features
    // of the ASCII dependency report and those of the ASCII dependency insight
    // report. For a given project, it generates a tree of the dependencies of
    // every configuration, and each dependency can be clicked to show the
    // insight of this dependency.
    id 'project-report'

    // Add support for the language Kotlin.
    id 'kotlin-android'

    // Add support for IDE plugin.
    // Useful to add custom sources and tests directories.
    id 'idea'

    // Gradle plugin to discover dependency updates
    id 'com.github.ben-manes.versions'
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Get system components versions from properties
///////////////////////////////////////////////////////////////////////////////
println("Reading system properties.")

final def systemNDKVersion = System.getProperty('ndkVersion', '21.3.6528147')
final def systemCMakeVersion = System.getProperty('cmakeVersion', '3.10.2')
final def systemTestType = System.getProperty('testType', 'debug')

println("NDK version: " + systemNDKVersion)
println("CMake version: " + systemCMakeVersion)
println("Test type: " + systemTestType)
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Set custom properties for the ADB
///////////////////////////////////////////////////////////////////////////////
println "setting global timeout for apk installation to 10 minutes"
DdmPreferences.setTimeOut(600000)
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Set source directories for the IDE
///////////////////////////////////////////////////////////////////////////////
ext {
    javaDir = file("$projectDir/src/main/java")
    kotlinDir = file("$projectDir/src/main/kotlin")

    mobileRtDir = file("$projectDir/MobileRT")
    componentsDir = file("$projectDir/Components")
    scenesDir = file("$projectDir/Scenes")
    systemDependentDir = file("$projectDir/System_dependent")

    resourcesAssetsDir = file("$projectDir/src/main/assets")
    resourcesProdDir = file("$projectDir/src/main/res")

    unitTestsDir = file("$projectDir/Unit_Testing")
    unitTestsJavaDir = file("$projectDir/src/test/java")
    androidTestsJavaDir = file("$projectDir/src/androidTest/java")

    resourcesTestsDir = file("$projectDir/src/test/resources")
    resourcesAndroidTestsDir = file("$projectDir/src/androidTest/resources")
}
idea.module {
    sourceDirs += javaDir
    sourceDirs += kotlinDir
    sourceDirs += mobileRtDir
    sourceDirs += componentsDir
    sourceDirs += scenesDir
    sourceDirs += systemDependentDir

    resourceDirs += resourcesAssetsDir
    resourceDirs += resourcesProdDir

    testSourceDirs += unitTestsDir
    testSourceDirs += unitTestsJavaDir
    testSourceDirs += androidTestsJavaDir

    testResourceDirs += resourcesTestsDir
    testResourceDirs += resourcesAndroidTestsDir
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Add flags to Java compiler
///////////////////////////////////////////////////////////////////////////////
allprojects {
    tasks.withType(JavaCompile) {
        println("Adding additional flags to the compiler.")

        options.setCompilerArgs([
            '-Xlint:all',
            '-verbose'
        ])

        options.setFork(true)
        options.setIncremental(true)
        options.setFailOnError(true)
        options.setVerbose(true)
        options.setWarnings(true)
        options.setListFiles(true)
        options.setDeprecation(true)
        options.setDebug(true)
    }
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// JaCoCo plugin configuration
///////////////////////////////////////////////////////////////////////////////
jacoco {
    setToolVersion "${jacoco_version}"
    setTargetCompatibility JavaVersion.VERSION_11
    setSourceCompatibility JavaVersion.VERSION_11
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// SonarQube plugin configuration
///////////////////////////////////////////////////////////////////////////////
sonarqube {
    setAndroidVariant 'debug'
    setSkipProject false
    properties {
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.projectName', 'MobileRT'
        property 'sonar.projectKey','TiagoMSSantos_MobileRT'
        property 'sonar.sources', 'src/main/java'
        property 'sonar.binaries', 'build'
//        property 'sonar.java.binaries', 'target/classes,build/tmp/java-classes'
        property 'sonar.tests', 'src/test/java, src/androidTest/java'
//        property 'sonar.java.test.binaries', 'build/intermediates/classes/debug'
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.kotlin.coveragePlugin', 'jacoco'
        property 'sonar.junit.reportsPath', 'build/test-results/testDebugUnitTest'
        property 'sonar.android.lint.report', 'build/reports/lint-results.xml'
        // Property 'sonar.jacoco.reportPath' is no longer supported. Use JaCoCo's xml report and
        // sonar-jacoco plugin.
//        property 'sonar.jacoco.reportPath', 'build/jacoco/testDebugUnitTest.exec'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'tiagomssantos'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/coverage/debug/report.xml'
        property 'sonar.junit.reportPaths', 'build/test-results/testDebugUnitTest'
        property 'sonar.exclusions', '**/*.kt'
        property 'sonar.verbose', 'true'
    }
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Android setup
///////////////////////////////////////////////////////////////////////////////
android {
    // Set NDK version
    setNdkVersion systemNDKVersion

    // Set build type for the tests
    setTestBuildType systemTestType

    // Setup required versions to compile
    setCompileSdkVersion 30
    setBuildToolsVersion "${build_tools_version}"

    // Setup signing configurations
    signingConfigs {
        Puscas {
            setStoreFile file('MobileRT.jks')
            setStorePassword '123456'
            setKeyPassword '123456'
            setKeyAlias 'Puscas'
        }
    }

    // Setup default configurations
    defaultConfig {
        setMinSdkVersion 16
        setTargetSdkVersion 29
        setTestInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments = ['clearPackageData': 'true', 'disableAnalytics': 'true']
        setApplicationId 'puscas.mobilertapp'
        setVersionName '1.0'
        setVersionCode 1
        setMultiDexEnabled true
        setTestHandleProfiling false
        setTestFunctionalTest false
        ndk {
            abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'
            setModuleName 'MobileRT'
        }
        externalNativeBuild {
            cmake {
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
            }
        }
    }

    // Setup native configurations
    externalNativeBuild {
        cmake {
            setPath 'CMakeLists.txt'
            setVersion systemCMakeVersion
        }
    }

    // Set Java version
    compileOptions {
        setTargetCompatibility JavaVersion.VERSION_1_8
        setSourceCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        setJvmTarget JavaVersion.VERSION_1_8.toString()
    }

    // Set build types
    buildTypes {
        debug {
            setDebuggable true
            setJniDebuggable true
            setTestCoverageEnabled true
            setVersionNameSuffix 'd'
            setRenderscriptDebuggable true
            setRenderscriptOptimLevel 0
            setMinifyEnabled false
            setSigningConfig signingConfigs.Puscas
            setShrinkResources false
            ndk {
            }
        }
        release {
            setDebuggable false
            setJniDebuggable false
            setTestCoverageEnabled false
            setVersionNameSuffix 'r'
            setRenderscriptDebuggable false
            setRenderscriptOptimLevel 3
            setMinifyEnabled false
            setSigningConfig signingConfigs.Puscas
            setShrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
            }
        }
    }

    // Setup product flavors
    productFlavors {
    }

    // Exclude some files from the package due to conflicts from different dependencies
    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
        exclude 'META-INF/licenses/ASM'
    }

    // Configure test options
    testOptions {
        unitTests {
            all {
                minHeapSize = "128m"
                maxHeapSize = "512m"
                // set JVM arguments for the test JVM(s)
                // Enable JMockit for the unit tests
                jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
//                jacoco {
//                    includeNoLocationClasses = true
//                }
            }
            includeAndroidResources = true
            returnDefaultValues = true
        }
        setAnimationsDisabled true
//        setExecution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    // Setup linter options
    lintOptions {
        setAbortOnError true
        setCheckAllWarnings true
        setExplainIssues true
        setNoLines true
        setShowAll true
        setWarningsAsErrors false
        setCheckDependencies true
        setAbsolutePaths false
        setCheckGeneratedSources true
        setCheckReleaseBuilds true
        setCheckTestSources true
        setHtmlReport true
        setXmlReport true
        setTextReport true
        setIgnoreTestSources false
        setIgnoreWarnings false
        setQuiet false
        enable 'WrongThreadInterprocedural', 'RtlHardcoded','RtlCompat', 'RtlEnabled'
        lintConfig file('lint.xml')
    }

    // Add resources directories to tests
    sourceSets {
        // Unit tests
        test {
            resources.srcDirs += ['src/test/resources']
        }
        // Instrumentation tests
        androidTest {
            manifest.srcFile 'src/androidTest/AndroidManifest.xml'
            resources.srcDirs += ['src/androidTest/resources']
        }
    }
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Add configurations
///////////////////////////////////////////////////////////////////////////////
configurations {
    debug
    release
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Setup tests to execute in parallel
///////////////////////////////////////////////////////////////////////////////
// ?: -> binary operator: x ?: y <==> x ? x : y
tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Add third party dependencies
///////////////////////////////////////////////////////////////////////////////
dependencies {
    // Dependencies for the Android application
    println("Adding dependencies for MobileRT.")

    // Android dependencies
    implementation "androidx.appcompat:appcompat:${appcompat_version}"
    implementation "androidx.multidex:multidex:${multidex_version}"

    // Java dependencies
    implementation "com.google.guava:guava:${guava_version}"
    implementation "net.sourceforge.streamsupport:streamsupport:${stream_support_version}"

    // More dependencies
    implementation "org.apache.commons:commons-lang3:${commons_lang3_version}"

    // Annotations
    implementation "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    implementation "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    // Web
    implementation "com.android.volley:volley:${volley_version}"

    // JSON serialization
    implementation "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"

    // Add support for Kotlin
    implementation "androidx.core:core-ktx:${androidX_core_kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_stdlib_jdk8_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${kotlinx_coroutines_android_version}"



    // Dependencies for the Android instrumentation tests
    println("Adding dependencies for the instrumentation tests.")


    androidTestImplementation "com.google.truth:truth:${truth_version}"

    androidTestImplementation "androidx.test.espresso:espresso-accessibility:${espresso_version}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${espresso_version}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${espresso_version}"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:${espresso_version}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${espresso_version}"
    androidTestImplementation "androidx.test.espresso:espresso-web:${espresso_version}"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:${espresso_version}"

    androidTestImplementation "androidx.test:rules:${androidX_test_library_version}"
    androidTestImplementation "androidx.test:runner:${androidX_test_library_version}"
//    androidTestUtil "androidx.test:orchestrator:${androidX_test_library_version}"

    // Annotations for the Android instrumentation tests
    androidTestAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"


    // Dependencies for the unit tests
    println("Adding dependencies for the unit tests.")

    testImplementation "junit:junit:${junit_version}"
    testImplementation "org.assertj:assertj-core:${assertj_version}"
    testImplementation "org.khronos:opengl-api:${khronos_gl_for_android_sdk_version}"
    testImplementation "org.jmockit:jmockit:${jmockit_version}"

    // Annotations for the unit tests
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"


    // Dependencies that give errors when added:

//    implementation 'org.apache.commons:commons-text:1.9'

    // Need Android API 26
    // https://stackoverflow.com/questions/52510370/java-lang-noclassdeffounderror-failed-resolution-of-ljava-time-localdate-erro
    // Caused by: java.lang.NoClassDefFoundError: java.time.LocalDateTime
    androidTestImplementation "org.assertj:assertj-core:${assertj_version}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5_version}"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:${junit5_version}"

//    androidTestImplementation "org.jmockit:jmockit:${jmockit_version}"
//    androidTestImplementation "org.mockito:mockito-android:${mockito_version}"
//    androidTestImplementation "org.mockito:mockito-core:${mockito_version}"
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Add third party repositories
///////////////////////////////////////////////////////////////////////////////
repositories {
    google()
    mavenCentral()
    mavenLocal()
    gradlePluginPortal()

    maven { url 'https://maven.google.com' }
    maven { url 'https://mvnrepository.com' }
    maven { url 'https://dl.google.com/dl/android/maven2/' }
    maven { url 'https://plugins.gradle.org/m2/'}
    maven { url 'https://jitpack.io' }
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
