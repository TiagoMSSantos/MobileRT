import groovy.json.JsonSlurper;

///////////////////////////////////////////////////////////////////////////////
// Apply plugins
///////////////////////////////////////////////////////////////////////////////
plugins {
    // Application plugin facilitates creating an executable JVM application.
    id 'com.android.application'

    // JaCoCo plugin provides code coverage metrics for Java code via
    // integration with JaCoCo.
    id 'jacoco'

    // Gradle plugin for running SonarQube analysis.
    id 'org.sonarqube'

    // Pitest provides an ability to perform a mutation testing and calculate a
    // mutation coverage of a Gradle-based projects with PIT.
//    id 'info.solidsoft.pitest'

    // Generates an HTML dependency report. This report combines the features
    // of the ASCII dependency report and those of the ASCII dependency insight
    // report. For a given project, it generates a tree of the dependencies of
    // every configuration, and each dependency can be clicked to show the
    // insight of this dependency.
    id 'project-report'

    // Add support for the language Kotlin.
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.android'

    // Add support for IDE plugin.
    // Useful to add custom sources and tests directories.
    id 'idea'

    // Gradle plugin to discover dependency updates
    id 'com.github.ben-manes.versions'
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Get system components versions from properties
///////////////////////////////////////////////////////////////////////////////
println("Reading system properties.")

final def systemNDKVersion = System.getProperty('ndkVersion', '23.2.8568313')
final def systemCMakeVersion = System.getProperty('cmakeVersion', '3.22.1')
final def systemTestType = System.getProperty('testType', 'debug')
final def customAbiFilters = System.getProperty('abiFilters', "[\"armeabi-v7a\", \"x86\", \"arm64-v8a\", \"x86_64\"]")
final def systemAbiFilters = new JsonSlurper().parseText(customAbiFilters) as String[]

println("NDK version: " + systemNDKVersion)
println("CMake version: " + systemCMakeVersion)
println("Test type: " + systemTestType)
println("ABI Filters: " + systemAbiFilters)
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Set source directories for the IDE
///////////////////////////////////////////////////////////////////////////////
ext {
    javaDir = file("$projectDir/src/main/java")
    kotlinDir = file("$projectDir/src/main/kotlin")

    mobileRtDir = file("$projectDir/MobileRT")
    componentsDir = file("$projectDir/Components")
    scenesDir = file("$projectDir/Scenes")
    systemDependentDir = file("$projectDir/System_dependent")

    resourcesAssetsDir = file("$projectDir/src/main/assets")
    resourcesProdDir = file("$projectDir/src/main/res")

    unitTestsDir = file("$projectDir/Unit_Testing")
    unitTestsJavaDir = file("$projectDir/src/test/java")
    androidTestsJavaDir = file("$projectDir/src/androidTest/java")

    resourcesTestsDir = file("$projectDir/src/test/resources")
    resourcesAndroidTestsDir = file("$projectDir/src/androidTest/resources")
}
idea.module {
    sourceDirs += javaDir
    sourceDirs += kotlinDir
    sourceDirs += mobileRtDir
    sourceDirs += componentsDir
    sourceDirs += scenesDir
    sourceDirs += systemDependentDir

    resourceDirs += resourcesAssetsDir
    resourceDirs += resourcesProdDir

    testSourceDirs += unitTestsDir
    testSourceDirs += unitTestsJavaDir
    testSourceDirs += androidTestsJavaDir

    testResourceDirs += resourcesTestsDir
    testResourceDirs += resourcesAndroidTestsDir
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Add flags to Java compiler
///////////////////////////////////////////////////////////////////////////////
allprojects {
    tasks.withType(JavaCompile) {
        println("Adding additional flags to the compiler.")

        options.setCompilerArgs([
            '-Xlint:all',
            '-verbose'
        ])

        options.setFork(true)
        options.setIncremental(true)
        options.setFailOnError(true)
        options.setVerbose(true)
        options.setWarnings(true)
        options.setListFiles(true)
        options.setDeprecation(true)
        options.setDebug(true)
    }
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// JaCoCo plugin configuration
///////////////////////////////////////////////////////////////////////////////
jacoco {
    setToolVersion "${jacoco_version}"
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// SonarQube plugin configuration
///////////////////////////////////////////////////////////////////////////////
sonar {
    setAndroidVariant 'debug'
    setSkipProject false
    // Properties taken from: https://docs.sonarqube.org/latest/analyzing-source-code/scanners/sonarscanner-for-gradle/
    properties {
        // Standard Sonar properties
        property 'sonar.projectKey','TiagoMSSantos_MobileRT'
        property 'sonar.projectDescription', 'Ray Tracing engine for multiple platforms'
        property 'sonar.projectVersion', "${project.version}"
        property 'sonar.projectBaseDir', "${project.projectDir}"

        // Additional properties provided for projects that have the Java-base or Java plugin applied
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.java.source', "${project.targetCompatibility}"
        property 'sonar.java.target', "${project.targetCompatibility}"
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java, src/androidTest/java'
        property 'sonar.java.binaries', 'build/intermediates/javac/debug/classes/'
        property 'sonar.java.test.binaries', 'build/intermediates/javac/debugUnitTest/classes/,build/intermediates/javac/debugAndroidTest/classes/'
        property 'sonar.junit.reportPaths', 'build/test-results/testDebugUnitTest'

        // More properties
        property 'sonar.inclusions', '**/src/**/*.java,**/src/**/*.kt,**/*.cpp,**/*.hpp'
        property 'sonar.exclusions', '**/Unit_Testing/**,**/test**,**/**Generated**,**/third_party**,**/build**'

        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.verbose', 'true'

        // Properties not documented
        property 'sonar.projectName', 'MobileRT'
        property 'sonar.binaries', 'build'
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.kotlin.coveragePlugin', 'jacoco'
        property 'sonar.androidLint.reportPaths', 'build/reports/lint-results.xml'
        property 'sonar.organization', 'tiagomssantos'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/coverage/androidTest/debug/connected/report.xml'
        property 'sonar.log.level', 'TRACE'
        property 'sonar.log.level.app', 'TRACE'
        property 'sonar.log.level.web', 'TRACE'
        property 'sonar.log.level.ce', 'TRACE'
        property 'sonar.log.level.es', 'TRACE'
        property 'sonar.scm.exclusions.disabled', 'false'
    }
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Android setup
///////////////////////////////////////////////////////////////////////////////
android {
    namespace 'puscas.mobilertapp'
    testNamespace 'puscas.mobilertapp.test'

    // Set NDK version
    setNdkVersion systemNDKVersion

    // Set build type for the tests
    setTestBuildType systemTestType

    // Setup required versions to compile
    setCompileSdkVersion 34
    setBuildToolsVersion "${build_tools_version}"

    // Setup signing configurations
    signingConfigs {
        Puscas {
            setStoreFile file('MobileRT.jks')
            setStorePassword '123456'
            setKeyPassword '123456'
            setKeyAlias 'Puscas'
        }
    }

    configurations {
        // Necessary to remove `listenablefuture` from dependencies:
        // https://stackoverflow.com/questions/56639529/duplicate-class-com-google-common-util-concurrent-listenablefuture-found-in-modu
        all*.exclude group: 'com.google.guava', module: 'listenablefuture'
    }

    // Setup default configurations
    defaultConfig {
        // The minimum Android API version possible is 14 due to compatibility with Appcompat dependency.
        setMinSdkVersion 14
        setTargetSdkVersion 34
        setTestInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments = ['clearPackageData': 'true', 'disableAnalytics': 'true']
        setApplicationId 'puscas.mobilertapp'
        setVersionName '1.0'
        setVersionCode 1
        setMultiDexEnabled true
        testHandleProfiling false
        testFunctionalTest false
        ndk {
            abiFilters systemAbiFilters
            setModuleName 'MobileRT'
        }
        externalNativeBuild {
            cmake {
                arguments "-DCMAKE_VERBOSE_MAKEFILE=ON"
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
            }
        }
    }

    // Setup native configurations
    externalNativeBuild {
        cmake {
            setPath 'CMakeLists.txt'
            setVersion systemCMakeVersion
        }
    }

    // Set Java version
    compileOptions {
        setTargetCompatibility JavaVersion.VERSION_17
        setSourceCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        setJvmTarget JavaVersion.VERSION_17.toString()
        freeCompilerArgs += [
            '-opt-in=kotlin.RequiresOptIn',
            '-opt-in=kotlinx.coroutines.DelicateCoroutinesApi',
        ]
    }

    // Set build types
    buildTypes {
        debug {
            setDebuggable true
            setJniDebuggable true
            setTestCoverageEnabled true
            setVersionNameSuffix 'd'
            setRenderscriptDebuggable true
            setRenderscriptOptimLevel 0
            setMinifyEnabled false
            setSigningConfig signingConfigs.Puscas
            setShrinkResources false
            ndk {
            }
        }
        release {
            setDebuggable false
            setJniDebuggable false
            setTestCoverageEnabled false
            setVersionNameSuffix 'r'
            setRenderscriptDebuggable false
            setRenderscriptOptimLevel 3
            setMinifyEnabled false
            setSigningConfig signingConfigs.Puscas
            setShrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
            }
        }
    }

    // Setup product flavors
    productFlavors {
    }
    packagingOptions {
        resources {
            // Exclude some files from the package due to conflicts from different dependencies
            excludes += ['META-INF/LICENSE.md', 'META-INF/LICENSE-notice.md', 'META-INF/licenses/ASM']
        }
    }

    // Configure test options
    testOptions {
        unitTests {
            all {
                minHeapSize = "128m"
                maxHeapSize = "512m"
                jvmArgs '-noverify', '-ea', '-Djdk.attach.allowAttachSelf=true',
                        // Flags added for Java 9+ to be able to use reflection. because
                        // Java Platform Module System that was introduced in Java 9, has an
                        // implementation of strong encapsulation.
                        // '--add-opens {A}/{package}={B}' (If the reflecting code is in a named module, 'B' can be replaced by its name.)
                        '--add-opens=java.base/java.lang=ALL-UNNAMED',
                        '--add-opens=java.base/java.util=ALL-UNNAMED',
                        '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED',
                        '--add-opens=java.base/java.io=ALL-UNNAMED',
                        '--add-opens=java.base/java.nio=ALL-UNNAMED',
                        '--add-opens=java.logging/java.util.logging=ALL-UNNAMED'
                jacoco {
                    includeNoLocationClasses = true
                    excludes = ['jdk.internal.*']
                }
            }
            includeAndroidResources = true
            returnDefaultValues = true
        }
        setAnimationsDisabled true
    }

    // Add resources directories to tests
    sourceSets {
        // Unit tests
        test {
            resources.srcDirs += ['src/test/resources']
        }
        // Instrumentation tests
        androidTest {
            manifest.srcFile 'src/androidTest/AndroidManifest.xml'
            resources.srcDirs += ['src/androidTest/resources']
        }
    }

    // adbOptions
    installation {
        installOptions '-t'
    }

    // Setup linter options
    lint {
        enable 'WrongThreadInterprocedural', 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        lintConfig file('lint.xml')
    }
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Add configurations
///////////////////////////////////////////////////////////////////////////////
configurations {
    debug
    release
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Merge Jacoco reports from Unit Tests and Instrumentation Tests
///////////////////////////////////////////////////////////////////////////////
task jacocoTestReport(type: JacocoReport, dependsOn: [
    "test" + systemTestType.capitalize() + "UnitTest",
    "connected" + systemTestType.capitalize() + "AndroidTest",
    "createDebugCoverageReport"
]) {
    reports {
        xml.getRequired().set(true)
        html.getRequired().set(true)
    }
    sourceDirectories.setFrom(files(["${project.projectDir}/src/main/java"]))
    classDirectories.setFrom(
        // Exclude the 'BuildConfig.class' because it is an automatically generated file.
        fileTree(dir: "${buildDir}/intermediates/javac/debug/classes/", excludes: ['**/BuildConfig.class']),
    )
    executionData.setFrom(fileTree(dir: "${buildDir}", includes: [
        "**/test*UnitTest.exec",
        "**/*coverage.ec"
    ]))
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Setup tests to execute in parallel
///////////////////////////////////////////////////////////////////////////////
// ?: -> binary operator: x ?: y <==> x ? x : y
tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors()
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Add third party dependencies
///////////////////////////////////////////////////////////////////////////////
dependencies {
    // Dependencies for the Android application
    println("Adding dependencies for MobileRT.")
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    // Android dependencies
    implementation "androidx.appcompat:appcompat:${appcompat_version}"
    implementation "androidx.multidex:multidex:${multidex_version}"

    // Java dependencies
    implementation "com.google.guava:guava:${guava_version}"
    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'
    implementation "net.sourceforge.streamsupport:streamsupport:${stream_support_version}"

    // Kotlin dependencies
    implementation "androidx.core:core-ktx:${androidX_core_kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_stdlib_jdk8_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${kotlinx_coroutines_android_version}"

    // Annotations
    implementation "androidx.annotation:annotation:${androidX_annotation_version}"



    // Dependencies for the Android instrumentation tests
    println("Adding dependencies for the instrumentation tests.")
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:${androidX_test_espresso_version}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${androidX_test_espresso_version}"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:${androidX_test_espresso_version}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${androidX_test_espresso_version}"
    androidTestImplementation "androidx.test.espresso:espresso-web:${androidX_test_espresso_version}"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:${androidX_test_espresso_version}"

    androidTestImplementation "androidx.test:rules:${androidX_test_version}"

    // Enable tracing
    debugImplementation "androidx.test.espresso:espresso-core:${androidX_test_espresso_version}"
    debugImplementation "androidx.test:runner:${androidX_test_runner_version}"



    // Dependencies for the unit tests
    println("Adding dependencies for the unit tests.")

    testImplementation "junit:junit:${junit_version}"
    testImplementation "org.assertj:assertj-core:${assertj_version}"
    testImplementation "org.khronos:opengl-api:${khronos_gl_for_android_sdk_version}"
    testImplementation "org.mockito:mockito-core:${mockito_version}"
    testImplementation "org.mockito:mockito-inline:${mockito_inline_version}"
    testImplementation "org.powermock:powermock-core:${powermock_version}"
    testImplementation "org.powermock:powermock-module-junit4:${powermock_version}"
    testImplementation "org.powermock:powermock-api-mockito2:${powermock_version}"
    // Necessary for code coverage to work properly.
    // Should be used `powermock-module-junit4-rule-agent` instead of `powermock-module-junit4-rule`.
    testImplementation "org.powermock:powermock-module-junit4-rule-agent:${powermock_version}"
    testImplementation "org.powermock:powermock-module-javaagent:${powermock_version}"
    testImplementation "org.easymock:easymock:${easymock_version}"
    testImplementation "org.springframework:spring-test:${spring_version}"


    // Dependencies that give errors when added:

//    implementation 'org.apache.commons:commons-text:1.9'

    // Need Android API 26
    // https://stackoverflow.com/questions/52510370/java-lang-noclassdeffounderror-failed-resolution-of-ljava-time-localdate-erro
    // Caused by: java.lang.NoClassDefFoundError: java.time.LocalDateTime
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Add third party repositories
///////////////////////////////////////////////////////////////////////////////
repositories {
    google()
    mavenCentral()
    mavenLocal()
    gradlePluginPortal()

    maven { url 'https://maven.google.com' }
    maven { url 'https://mvnrepository.com' }
    maven { url 'https://dl.google.com/dl/android/maven2/' }
    maven { url 'https://plugins.gradle.org/m2/'}
    maven { url 'https://jitpack.io' }
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Ignore beta versions of dependencies in the discover of dependency updates
///////////////////////////////////////////////////////////////////////////////
def isNonStable = { String version ->
    def betaKeyword = ['RC', 'CANDIDATE', 'ALPHA', 'BETA', 'M1'].any { it -> version.toUpperCase().contains(it) }
    return betaKeyword
}

// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
                    reject('Release candidate')
                }
                if (it.currentVersion.contains("native-mt") && !it.candidate.version.contains("native-mt")) {
                    reject('kotlinx.coroutines not the same type of version')
                }
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
