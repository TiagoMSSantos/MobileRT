# Opt in using the repository setting "Build config validation"
version: ~> 1.0

# language: android, c, clojure, cpp, crystal, csharp, d, dart, elixir, elm,objective-c, ruby
language: cpp

# Git
git:
  submodules: false

# arch: amd64, arm64, arm64-graviton2, ppc64le, s390x
# os: linux, osx, windows

# dist: 20.04: focal | 18.04: bionic | 16.04: xenial | 14.04: trusty | 12.04: precise | server-2016

# compiler: gcc, clang


# Jobs
_shared_job_linux: &shared_job_linux
  before_install:
  - bash scripts/install_dependencies.sh;
  - export CPLUS_INCLUDE_PATH=/usr/lib/gcc/s390x-linux-gnu/7/include:${CPLUS_INCLUDE_PATH};
  - export LIBRARY_PATH=/usr/local/Cellar/gcc/9.2.0_2/lib/gcc/9:${LIBRARY_PATH};
  - export LIBRARY_PATH=/usr/local/Cellar/libomp/11.0.0/lib:${LIBRARY_PATH};
  - export LIBRARY_PATH=/usr/lib/gcc/s390x-linux-gnu/7:${LIBRARY_PATH};
  - export LD_LIBRARY_PATH=/usr/local/clang/lib:${LD_LIBRARY_PATH};
  install:
  - mkdir -p reports;
  - mkdir -p build_Debug;
  - bash scripts/compile_native.sh debug g++ >&1 | tee ./reports/build.log;
  before_script:
  - ls -laR build_Debug/;
  script:
  - ./build_Debug/bin/UnitTestsd;
  after_script:
  - ls -laR build_Debug/;
  after_success:
  - ls -laR build_Debug/;
  after_failure:
  - ls -laR build_Debug/;

_shared_job_mac: &shared_job_mac
  before_install:
  - bash scripts/install_dependencies.sh;
  - sudo xcode-select -p;
  - sudo xcode-select --install || true;
#  - sudo xcode-select --switch /System/Volumes/Data/Applications/Xcode-12.2.beta.3.app/Contents/Developer;
#  - sudo xcode-select --switch /Library/Developer/CommandLineTools;
#  - export CPLUS_INCLUDE_PATH=/System/Volumes/Data/Library/Developer/CommandLineTools/usr/include/c++/v1:${CPLUS_INCLUDE_PATH};
#  - export CPLUS_INCLUDE_PATH=/System/Volumes/Data/Applications/Xcode-12.2.beta.3.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include:${CPLUS_INCLUDE_PATH};
#  - export CPLUS_INCLUDE_PATH=/System/Volumes/Data/Applications/Xcode-12.2.beta.3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1:${CPLUS_INCLUDE_PATH};
  - export LIBRARY_PATH=/usr/local/Cellar/libomp/11.0.0/lib:${LIBRARY_PATH};
  - export LD_LIBRARY_PATH=/usr/local/clang/lib:${LD_LIBRARY_PATH};
  install:
  - mkdir -p reports;
  - bash scripts/compile_native.sh debug g++ 2>&1 | tee ./reports/build.log;
  before_script:
  - ls -laR build_Debug/;
  script:
  - ./build_Debug/bin/UnitTestsd;
  after_script:
  - ls -laR build_Debug/;
  after_success:
  - ls -laR build_Debug/;
  after_failure:
  - ls -laR build_Debug/;

_shared_job_windows: &shared_job_windows
  language: bash
  before_install:
  - choco install python --version 3.8.0
  - python -m pip install --upgrade pip
  - pip install conan
  env: PATH=/c/Python38:/c/Python38/Scripts:$PATH
  install:
  - mkdir -p reports;
  - mkdir -p build_Debug;
  - bash scripts/compile_native.sh debug ${CXX} 2>&1 | tee ./reports/build.log;
  before_script:
  - ls -laR build_Debug/;
  script:
  - ./build_Debug/bin/UnitTestsd;
  after_script:
  - ls -laR build_Debug/;
  after_success:
  - ls -laR build_Debug/;
  after_failure:
  - ls -laR build_Debug/;

jobs:
  include:

  - stage: Build
    os: linux
    dist: bionic
    arch: amd64
    compiler: gcc
    <<: *shared_job_linux

  - stage: Build
    os: linux
    dist: bionic
    arch: amd64
    compiler: clang
    <<: *shared_job_linux

  - stage: Build
    os: linux
    dist: bionic
    arch: arm64
    compiler: gcc
    <<: *shared_job_linux

  - stage: Build
    os: linux
    dist: bionic
    arch: arm64
    compiler: clang
    env:
    - CXX=clang++-8
    <<: *shared_job_linux

  - stage: Build
    os: linux
    dist: bionic
    arch: arm64-graviton2
    compiler: gcc
    <<: *shared_job_linux

  - stage: Build
    os: linux
    dist: bionic
    arch: arm64-graviton2
    compiler: clang
    <<: *shared_job_linux

  - stage: Build
    os: linux
    dist: bionic
    arch: ppc64le
    compiler: gcc
    <<: *shared_job_linux

  - stage: Build
    os: linux
    dist: bionic
    arch: ppc64le
    compiler: clang
    env:
    - CXX=clang++-8
    <<: *shared_job_linux

  - stage: Build
    os: linux
    dist: bionic
    arch: s390x
    compiler: gcc
    <<: *shared_job_linux

# OpenMP binaries not included in the package managers: apt, conan
#  - stage: Build
#    os: linux
#    dist: bionic
#    arch: s390x
#    compiler: clang
#    env:
#    - CXX=clang++-8
#    <<: *shared_job_linux


  - stage: Build
    os: osx
    osx_image: xcode12.2
    arch: amd64
    compiler: gcc
    <<: *shared_job_mac

  - stage: Build
    os: osx
    osx_image: xcode12.2
    arch: amd64
    compiler: clang
    <<: *shared_job_mac


  - stage: Build
    os: windows
    arch: amd64
    compiler: gcc
    <<: *shared_job_windows
